<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="media_8cpp" kind="file" language="C++">
    <compoundname>media.cpp</compoundname>
    <includes local="no">winrt/Windows.Foundation.h</includes>
    <includes local="no">winrt/Windows.System.Threading.h</includes>
    <includes refid="media_8hpp" local="no">media.hpp</includes>
    <includes local="no">spdlog/spdlog.h</includes>
    <includes local="no">codecapi.h</includes>
    <includes local="no">dshowasf.h</includes>
    <includes local="no">mediaobj.h</includes>
    <incdepgraph>
      <node id="6">
        <label>filesystem</label>
      </node>
      <node id="10">
        <label>mfidl.h</label>
      </node>
      <node id="16">
        <label>mediaobj.h</label>
      </node>
      <node id="12">
        <label>wmcodecdsp.h</label>
      </node>
      <node id="5">
        <label>experimental/generator</label>
      </node>
      <node id="14">
        <label>codecapi.h</label>
      </node>
      <node id="7">
        <label>gsl/gsl</label>
      </node>
      <node id="15">
        <label>dshowasf.h</label>
      </node>
      <node id="8">
        <label>mfapi.h</label>
      </node>
      <node id="13">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="3">
        <label>media.hpp</label>
        <link refid="media_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>winrt/Windows.Foundation.h</label>
      </node>
      <node id="2">
        <label>winrt/Windows.System.Threading.h</label>
      </node>
      <node id="9">
        <label>mferror.h</label>
      </node>
      <node id="4">
        <label>winrt/base.h</label>
      </node>
      <node id="0">
        <label>src/media.cpp</label>
        <link refid="media_8cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mfreadwrite.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structcritical__section__t" prot="public">critical_section_t</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="media_8cpp_1af496ff7a5e86499a1684a4b103e323d6" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto media_startup</definition>
        <argsstring>() noexcept(false) -&gt; gsl::final _action&lt; HRESULT(WINAPI *)()&gt;</argsstring>
        <name>media_startup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>MFStartup </para></simplesect>
<simplesect kind="see"><para>MFShutdown </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>winrt::hresult_error</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="32" column="1" bodyfile="src/media.cpp" bodystart="32" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a633bf2383709d1b8eabe2a7e96a932dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT get_devices</definition>
        <argsstring>(std::vector&lt; com_ptr&lt; IMFActivate &gt;&gt; &amp;devices, IMFAttributes *attributes) noexcept</argsstring>
        <name>get_devices</name>
        <param>
          <type>std::vector&lt; com_ptr&lt; IMFActivate &gt;&gt; &amp;</type>
          <declname>devices</declname>
        </param>
        <param>
          <type>IMFAttributes *</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>MFEnumDeviceSources </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="40" column="1" bodyfile="src/media.cpp" bodystart="40" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a9d541b064c18c82cbaada480f277393d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT get_string</definition>
        <argsstring>(gsl::not_null&lt; IMFAttributes *&gt; attribute, const GUID &amp;uuid, winrt::hstring &amp;name) noexcept</argsstring>
        <name>get_string</name>
        <param>
          <type>gsl::not_null&lt; IMFAttributes *&gt;</type>
          <declname>attribute</declname>
        </param>
        <param>
          <type>const GUID &amp;</type>
          <declname>uuid</declname>
        </param>
        <param>
          <type>winrt::hstring &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/api/mfobjects/nf-mfobjects-imfattributes-getstring">https://docs.microsoft.com/en-us/windows/win32/api/mfobjects/nf-mfobjects-imfattributes-getstring</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="56" column="1" bodyfile="src/media.cpp" bodystart="56" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a10e31b22b2ec6d7d014f39756c74f1a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT get_name</definition>
        <argsstring>(gsl::not_null&lt; IMFActivate *&gt; device, winrt::hstring &amp;name) noexcept</argsstring>
        <name>get_name</name>
        <param>
          <type>gsl::not_null&lt; IMFActivate *&gt;</type>
          <declname>device</declname>
        </param>
        <param>
          <type>winrt::hstring &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="66" column="1" bodyfile="src/media.cpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a2e3e46c775f95b0caee22187507bdc04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT get_name</definition>
        <argsstring>(gsl::not_null&lt; IMFActivate *&gt; device, std::string &amp;ref) noexcept</argsstring>
        <name>get_name</name>
        <param>
          <type>gsl::not_null&lt; IMFActivate *&gt;</type>
          <declname>device</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="70" column="1" bodyfile="src/media.cpp" bodystart="70" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1aea561087a693bf518cc01b6877d847f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT get_name</definition>
        <argsstring>(gsl::not_null&lt; IMFActivate *&gt; device, std::wstring &amp;ref) noexcept</argsstring>
        <name>get_name</name>
        <param>
          <type>gsl::not_null&lt; IMFActivate *&gt;</type>
          <declname>device</declname>
        </param>
        <param>
          <type>std::wstring &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="78" column="1" bodyfile="src/media.cpp" bodystart="78" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a682f9ad46192477fea2bf4363cd9c38c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT get_hardware_url</definition>
        <argsstring>(gsl::not_null&lt; IMFTransform *&gt; transform, winrt::hstring &amp;name) noexcept</argsstring>
        <name>get_hardware_url</name>
        <param>
          <type>gsl::not_null&lt; IMFTransform *&gt;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>winrt::hstring &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="86" column="1" bodyfile="src/media.cpp" bodystart="86" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1acc0d1067310ca2e55353c2f9c784b4d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT resolve</definition>
        <argsstring>(const fs::path &amp;fpath, IMFMediaSourceEx **source, MF_OBJECT_TYPE &amp;media_object_type) noexcept</argsstring>
        <name>resolve</name>
        <param>
          <type>const fs::path &amp;</type>
          <declname>fpath</declname>
        </param>
        <param>
          <type>IMFMediaSourceEx **</type>
          <declname>source</declname>
        </param>
        <param>
          <type>MF_OBJECT_TYPE &amp;</type>
          <declname>media_object_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>MFCreateSourceResolver </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="99" column="1" bodyfile="src/media.cpp" bodystart="99" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1ac7901976148561b26cb92d72984915e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT make_transform_H264</definition>
        <argsstring>(IMFTransform **transform) noexcept</argsstring>
        <name>make_transform_H264</name>
        <param>
          <type>IMFTransform **</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>CoCreateInstance </para></simplesect>
<simplesect kind="see"><para>CLSID_CMSH264DecoderMFT </para></simplesect>
<simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/h-264-video-decoder">https://docs.microsoft.com/en-us/windows/win32/medfound/h-264-video-decoder</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="110" column="1" bodyfile="src/media.cpp" bodystart="110" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a25c7807dc1100186cde05dd6171695d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT make_transform_video</definition>
        <argsstring>(IMFTransform **transform, const IID &amp;iid) noexcept</argsstring>
        <name>make_transform_video</name>
        <param>
          <type>IMFTransform **</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>const IID &amp;</type>
          <declname>iid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>CoCreateInstance </para></simplesect>
<simplesect kind="see"><para>Color Converter DSP <ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/colorconverter">https://docs.microsoft.com/en-us/windows/win32/medfound/colorconverter</ulink> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iid</parametername>
</parameternamelist>
<parameterdescription>
<para>CLSID_CColorConvertDMO </para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>test CLSID_OpenCLMFTDx11 </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="118" column="1" bodyfile="src/media.cpp" bodystart="118" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1ac86d0b906cf9430128eedf3eb73c6b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT make_transform_video</definition>
        <argsstring>(IMFTransform **transform) noexcept</argsstring>
        <name>make_transform_video</name>
        <param>
          <type>IMFTransform **</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>CoCreateInstance </para></simplesect>
<simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/video-processor-mft">https://docs.microsoft.com/en-us/windows/win32/medfound/video-processor-mft</ulink> </para></simplesect>
<simplesect kind="see"><para>CLSID_VideoProcessorMFT </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="126" column="1" bodyfile="src/media.cpp" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1ab4bbdfe8aaaec4d1ac0f33775a51c88d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT configure_D3D11_DXGI</definition>
        <argsstring>(gsl::not_null&lt; IMFTransform *&gt; transform, IMFDXGIDeviceManager *device_manager) noexcept</argsstring>
        <name>configure_D3D11_DXGI</name>
        <param>
          <type>gsl::not_null&lt; IMFTransform *&gt;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>IMFDXGIDeviceManager *</type>
          <declname>device_manager</declname>
        </param>
        <briefdescription>
<para>configure D3D11 if the transform supports it </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>E_NOTIMPL, E_FAIL ... </para></simplesect>
<simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/hardware-mfts">https://docs.microsoft.com/en-us/windows/win32/medfound/hardware-mfts</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="130" column="1" bodyfile="src/media.cpp" bodystart="130" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a68c4181022273358e97082ce3d58f730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT configure_acceleration_H264</definition>
        <argsstring>(gsl::not_null&lt; IMFTransform *&gt; transform) noexcept</argsstring>
        <name>configure_acceleration_H264</name>
        <param>
          <type>gsl::not_null&lt; IMFTransform *&gt;</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/h-264-video-decoder#transform-attributes">https://docs.microsoft.com/en-us/windows/win32/medfound/h-264-video-decoder#transform-attributes</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="144" column="1" bodyfile="src/media.cpp" bodystart="144" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a36c823331d7934085fcafd8be9774f1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT configure_video_output_RGB565</definition>
        <argsstring>(IMFMediaType *type) noexcept</argsstring>
        <name>configure_video_output_RGB565</name>
        <param>
          <type>IMFMediaType *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="157" column="1" bodyfile="src/media.cpp" bodystart="157" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a06487a2e6a718dda1f5ba4d6682a3b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT make_video_output_RGB565</definition>
        <argsstring>(IMFMediaType **ptr) noexcept</argsstring>
        <name>make_video_output_RGB565</name>
        <param>
          <type>IMFMediaType **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="167" column="1" bodyfile="src/media.cpp" bodystart="167" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a0bdb0867cb488bf9bb7d813b8892657e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT configure_video_output_RGB32</definition>
        <argsstring>(IMFMediaType *type) noexcept</argsstring>
        <name>configure_video_output_RGB32</name>
        <param>
          <type>IMFMediaType *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="181" column="1" bodyfile="src/media.cpp" bodystart="181" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a6e10c0ed200d4653f02d186894b994d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT make_video_output_RGB32</definition>
        <argsstring>(IMFMediaType **ptr) noexcept</argsstring>
        <name>make_video_output_RGB32</name>
        <param>
          <type>IMFMediaType **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>: configure MF_MT_FRAME_SIZE, MF_MT_FRAME_RATE </para><para>: configure MF_MT_PIXEL_ASPECT_RATIO </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="195" column="1" bodyfile="src/media.cpp" bodystart="195" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1ae7ff03cbc188286434f1272e711ded32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT try_output_type</definition>
        <argsstring>(com_ptr&lt; IMFTransform &gt; transform, DWORD ostream, const GUID &amp;desired, IMFMediaType **output_type) noexcept</argsstring>
        <name>try_output_type</name>
        <param>
          <type>com_ptr&lt; IMFTransform &gt;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>ostream</declname>
        </param>
        <param>
          <type>const GUID &amp;</type>
          <declname>desired</declname>
        </param>
        <param>
          <type>IMFMediaType **</type>
          <declname>output_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="209" column="1" bodyfile="src/media.cpp" bodystart="209" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1abf085e7b249d348d8ad52e59dfef2279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto get_input_available_types</definition>
        <argsstring>(com_ptr&lt; IMFTransform &gt; transform, DWORD num_input, HRESULT &amp;ec) noexcept(false) -&gt; generator&lt; com_ptr&lt; IMFMediaType &gt;&gt;</argsstring>
        <name>get_input_available_types</name>
        <param>
          <type>com_ptr&lt; IMFTransform &gt;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>num_input</declname>
        </param>
        <param>
          <type>HRESULT &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="227" column="1" bodyfile="src/media.cpp" bodystart="227" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a8bd05923b2a283b162dbf7ec4481dd71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto try_output_available_types</definition>
        <argsstring>(com_ptr&lt; IMFTransform &gt; transform, DWORD stream_id, DWORD &amp;type_index) noexcept(false) -&gt; generator&lt; com_ptr&lt; IMFMediaType &gt;&gt;</argsstring>
        <name>try_output_available_types</name>
        <param>
          <type>com_ptr&lt; IMFTransform &gt;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>stream_id</declname>
        </param>
        <param>
          <type>DWORD &amp;</type>
          <declname>type_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="239" column="1" bodyfile="src/media.cpp" bodystart="239" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1ad125531e1be88ca277b5a0385a65dd6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto get_output_available_types</definition>
        <argsstring>(com_ptr&lt; IMFTransform &gt; transform, DWORD num_output, HRESULT &amp;ec) noexcept(false) -&gt; generator&lt; com_ptr&lt; IMFMediaType &gt;&gt;</argsstring>
        <name>get_output_available_types</name>
        <param>
          <type>com_ptr&lt; IMFTransform &gt;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>num_output</declname>
        </param>
        <param>
          <type>HRESULT &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="250" column="1" bodyfile="src/media.cpp" bodystart="250" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a242188e99d08d076a919a57a23f68eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto try_input_available_types</definition>
        <argsstring>(com_ptr&lt; IMFTransform &gt; transform, DWORD stream_id, DWORD &amp;type_index) noexcept(false) -&gt; generator&lt; com_ptr&lt; IMFMediaType &gt;&gt;</argsstring>
        <name>try_input_available_types</name>
        <param>
          <type>com_ptr&lt; IMFTransform &gt;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>stream_id</declname>
        </param>
        <param>
          <type>DWORD &amp;</type>
          <declname>type_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="262" column="1" bodyfile="src/media.cpp" bodystart="262" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1abe3699526fda14d599f458e06d2e266a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT configure_rectangle</definition>
        <argsstring>(gsl::not_null&lt; IMFVideoProcessorControl *&gt; control, gsl::not_null&lt; IMFMediaType *&gt; media_type) noexcept</argsstring>
        <name>configure_rectangle</name>
        <param>
          <type>gsl::not_null&lt; IMFVideoProcessorControl *&gt;</type>
          <declname>control</declname>
        </param>
        <param>
          <type>gsl::not_null&lt; IMFMediaType *&gt;</type>
          <declname>media_type</declname>
        </param>
        <briefdescription>
<para>exactly same sized src/dst rectangle; </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="273" column="1" bodyfile="src/media.cpp" bodystart="273" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a8c673f14372ad65a367dc09f9447a31e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT configure_source_rectangle</definition>
        <argsstring>(gsl::not_null&lt; IPropertyStore *&gt; props, const RECT &amp;rect) noexcept</argsstring>
        <name>configure_source_rectangle</name>
        <param>
          <type>gsl::not_null&lt; IPropertyStore *&gt;</type>
          <declname>props</declname>
        </param>
        <param>
          <type>const RECT &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/videoresizer">https://docs.microsoft.com/en-us/windows/win32/medfound/videoresizer</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="287" column="1" bodyfile="src/media.cpp" bodystart="287" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a6800e4d4e0fecf470492de755687e1a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT configure_destination_rectangle</definition>
        <argsstring>(gsl::not_null&lt; IPropertyStore *&gt; props, const RECT &amp;rect) noexcept</argsstring>
        <name>configure_destination_rectangle</name>
        <param>
          <type>gsl::not_null&lt; IPropertyStore *&gt;</type>
          <declname>props</declname>
        </param>
        <param>
          <type>const RECT &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/videoresizer">https://docs.microsoft.com/en-us/windows/win32/medfound/videoresizer</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="303" column="1" bodyfile="src/media.cpp" bodystart="303" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a6791b11ab050c4addac5b15ea7d36beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT get_stream_descriptor</definition>
        <argsstring>(IMFPresentationDescriptor *presentation, IMFStreamDescriptor **ptr)</argsstring>
        <name>get_stream_descriptor</name>
        <param>
          <type>IMFPresentationDescriptor *</type>
          <declname>presentation</declname>
        </param>
        <param>
          <type>IMFStreamDescriptor **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="318" column="1" bodyfile="src/media.cpp" bodystart="318" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a9b6418de111b9bb7228976c3cd496bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT configure_video</definition>
        <argsstring>(com_ptr&lt; IMFMediaType &gt; type)</argsstring>
        <name>configure_video</name>
        <param>
          <type>com_ptr&lt; IMFMediaType &gt;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="332" column="1" bodyfile="src/media.cpp" bodystart="332" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a025536ca76dd2c69a4882b3562ea141d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT configure</definition>
        <argsstring>(com_ptr&lt; IMFStreamDescriptor &gt; stream) noexcept</argsstring>
        <name>configure</name>
        <param>
          <type>com_ptr&lt; IMFStreamDescriptor &gt;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/video-processor-mft">https://docs.microsoft.com/en-us/windows/win32/medfound/video-processor-mft</ulink> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/video-media-types">https://docs.microsoft.com/en-us/windows/win32/medfound/video-media-types</ulink> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/about-yuv-video">https://docs.microsoft.com/en-us/windows/win32/medfound/about-yuv-video</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="359" column="1" bodyfile="src/media.cpp" bodystart="359" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a47c552d3ea8e9b62dba8f974a1f42b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto read_samples</definition>
        <argsstring>(com_ptr&lt; IMFSourceReader &gt; source_reader, DWORD &amp;index, DWORD &amp;flags, LONGLONG &amp;timestamp, LONGLONG &amp;duration) noexcept(false) -&gt; generator&lt; com_ptr&lt; IMFSample &gt;&gt;</argsstring>
        <name>read_samples</name>
        <param>
          <type>com_ptr&lt; IMFSourceReader &gt;</type>
          <declname>source_reader</declname>
        </param>
        <param>
          <type>DWORD &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>DWORD &amp;</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>LONGLONG &amp;</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>LONGLONG &amp;</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/mf-source-reader-enable-advanced-video-processing#remarks">https://docs.microsoft.com/en-us/windows/win32/medfound/mf-source-reader-enable-advanced-video-processing#remarks</ulink> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="379" column="1" bodyfile="src/media.cpp" bodystart="379" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1ad525b785a539ea78171460f58808666a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto decode</definition>
        <argsstring>(com_ptr&lt; IMFTransform &gt; transform, DWORD ostream, com_ptr&lt; IMFMediaType &gt; output_type, HRESULT &amp;ec) noexcept -&gt; generator&lt; com_ptr&lt; IMFSample &gt;&gt;</argsstring>
        <name>decode</name>
        <param>
          <type>com_ptr&lt; IMFTransform &gt;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>ostream</declname>
        </param>
        <param>
          <type>com_ptr&lt; IMFMediaType &gt;</type>
          <declname>output_type</declname>
        </param>
        <param>
          <type>HRESULT &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="398" column="1" bodyfile="src/media.cpp" bodystart="398" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1a87ec07cf3bb07d930ccd7a740ae41a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto process</definition>
        <argsstring>(com_ptr&lt; IMFTransform &gt; transform, DWORD istream, DWORD ostream, com_ptr&lt; IMFSample &gt; input_sample, com_ptr&lt; IMFMediaType &gt; output_type, HRESULT &amp;ec) noexcept -&gt; generator&lt; com_ptr&lt; IMFSample &gt;&gt;</argsstring>
        <name>process</name>
        <param>
          <type>com_ptr&lt; IMFTransform &gt;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>istream</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>ostream</declname>
        </param>
        <param>
          <type>com_ptr&lt; IMFSample &gt;</type>
          <declname>input_sample</declname>
        </param>
        <param>
          <type>com_ptr&lt; IMFMediaType &gt;</type>
          <declname>output_type</declname>
        </param>
        <param>
          <type>HRESULT &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="445" column="1" bodyfile="src/media.cpp" bodystart="445" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1ad7a020b7463bcd21b3cfc47b9406a1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto process</definition>
        <argsstring>(com_ptr&lt; IMFTransform &gt; transform, DWORD istream, DWORD ostream, com_ptr&lt; IMFSourceReader &gt; source_reader, HRESULT &amp;ec) -&gt; generator&lt; com_ptr&lt; IMFSample &gt;&gt;</argsstring>
        <name>process</name>
        <param>
          <type>com_ptr&lt; IMFTransform &gt;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>istream</declname>
        </param>
        <param>
          <type>DWORD</type>
          <declname>ostream</declname>
        </param>
        <param>
          <type>com_ptr&lt; IMFSourceReader &gt;</type>
          <declname>source_reader</declname>
        </param>
        <param>
          <type>HRESULT &amp;</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="469" column="1" bodyfile="src/media.cpp" bodystart="469" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1af9961cf281c89416cd111cdad5d8d573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT create_single_buffer_sample</definition>
        <argsstring>(DWORD bufsz, IMFSample **sample)</argsstring>
        <name>create_single_buffer_sample</name>
        <param>
          <type>DWORD</type>
          <declname>bufsz</declname>
        </param>
        <param>
          <type>IMFSample **</type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="500" column="1" bodyfile="src/media.cpp" bodystart="500" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1ae466bb2d4d55e39c2489624ab86633ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT create_and_copy_single_buffer_sample</definition>
        <argsstring>(IMFSample *src, IMFSample **dst)</argsstring>
        <name>create_and_copy_single_buffer_sample</name>
        <param>
          <type>IMFSample *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>IMFSample **</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="509" column="1" bodyfile="src/media.cpp" bodystart="509" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="media_8cpp_1abd1996125215540a7ae3bf9537f7841f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT get_transform_output</definition>
        <argsstring>(IMFTransform *transform, IMFSample **sample, BOOL &amp;flushed)</argsstring>
        <name>get_transform_output</name>
        <param>
          <type>IMFTransform *</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>IMFSample **</type>
          <declname>sample</declname>
        </param>
        <param>
          <type>BOOL &amp;</type>
          <declname>flushed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.cpp" line="523" column="1" bodyfile="src/media.cpp" bodystart="523" bodyend="571"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;winrt/Windows.Foundation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;winrt/Windows.System.Threading.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;media.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/spdlog.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;codecapi.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>[codec]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dshowasf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mediaobj.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>[dsp]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="structcritical__section__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcritical__section__t" kindref="compound">critical_section_t</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CRITICAL_SECTION<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcritical__section__t" kindref="compound">critical_section_t</ref>()<sp/>noexcept<sp/>:<sp/>CRITICAL_SECTION{}<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InitializeCriticalSection(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="structcritical__section__t" kindref="compound">critical_section_t</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeleteCriticalSection(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>try_lock()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TryEnterCriticalSection(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lock()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EnterCriticalSection(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unlock()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LeaveCriticalSection(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal">};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>media_startup()<sp/>noexcept(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>-&gt;<sp/>gsl::final_action&lt;HRESULT(WINAPI*)()&gt;<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>MFStartup(MF_VERSION))</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>winrt::hresult_error{hr};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;media_foundation:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;-<sp/>version:<sp/>{:x}&quot;</highlight><highlight class="normal">,<sp/>MF_VERSION);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gsl::finally(&amp;MFShutdown);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">HRESULT<sp/>get_devices(std::vector&lt;com_ptr&lt;IMFActivate&gt;&gt;&amp;<sp/>devices,<sp/>IMFAttributes*<sp/>attributes)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>IMFActivate**<sp/>handles<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>MFEnumDeviceSources(attributes,<sp/>&amp;handles,<sp/>&amp;count);<sp/>FAILED(hr))</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on_return<sp/>=<sp/>gsl::finally([handles]()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CoTaskMemFree(handles);<sp/></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>deallocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0u;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ptr&lt;IMFActivate&gt;<sp/>activate{};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>activate.attach(handles[i]);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>devices.emplace_back(move(activate));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_OK;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">HRESULT<sp/>get_string(gsl::not_null&lt;IMFAttributes*&gt;<sp/>attribute,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GUID&amp;<sp/>uuid,<sp/>winrt::hstring&amp;<sp/>name)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>UINT32<sp/>max_size<sp/>=<sp/>240;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>WCHAR<sp/>buf[max_size]{};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>buflen{};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>HRESULT<sp/>hr<sp/>=<sp/>attribute-&gt;GetString(uuid,<sp/>buf,<sp/>max_size,<sp/>&amp;buflen);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SUCCEEDED(hr))</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>{buf,<sp/>buflen};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">HRESULT<sp/>get_name(gsl::not_null&lt;IMFActivate*&gt;<sp/>device,<sp/>winrt::hstring&amp;<sp/>name)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_string(device,<sp/>MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME,<sp/>name);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">HRESULT<sp/>get_name(gsl::not_null&lt;IMFActivate*&gt;<sp/>device,<sp/>std::string&amp;<sp/>ref)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>winrt::hstring<sp/>name{};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>get_name(device,<sp/>name);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>SUCCEEDED<sp/>(hr)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref<sp/>=<sp/>winrt::to_string(name);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">HRESULT<sp/>get_name(gsl::not_null&lt;IMFActivate*&gt;<sp/>device,<sp/>std::wstring&amp;<sp/>ref)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>winrt::hstring<sp/>name{};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>get_name(device,<sp/>name);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>SUCCEEDED<sp/>(hr)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref<sp/>=<sp/>name.c_str();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">HRESULT<sp/>get_hardware_url(gsl::not_null&lt;IMFTransform*&gt;<sp/>transform,<sp/>winrt::hstring&amp;<sp/>name)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFAttributes&gt;<sp/>attrs{};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>transform-&gt;GetAttributes(attrs.put()))</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>UINT32<sp/>max_size<sp/>=<sp/>240;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>WCHAR<sp/>buf[max_size]{};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>buflen{};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>HRESULT<sp/>hr<sp/>=<sp/>attrs-&gt;GetString(MFT_ENUM_HARDWARE_URL_Attribute,<sp/>buf,<sp/>max_size,<sp/>&amp;buflen);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SUCCEEDED(hr))</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>{buf,<sp/>buflen};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">HRESULT<sp/>resolve(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fs::path&amp;<sp/>fpath,<sp/>IMFMediaSourceEx**<sp/>source,<sp/>MF_OBJECT_TYPE&amp;<sp/>media_object_type)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFSourceResolver&gt;<sp/>resolver{};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>MFCreateSourceResolver(resolver.put()))</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IUnknown&gt;<sp/>unknown{};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>resolver-&gt;CreateObjectFromURL(fpath.c_str(),<sp/>MF_RESOLUTION_MEDIASOURCE<sp/>|<sp/>MF_RESOLUTION_READ,<sp/>NULL,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;media_object_type,<sp/>unknown.put()))</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unknown-&gt;QueryInterface(source);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">HRESULT<sp/>make_transform_H264(IMFTransform**<sp/>transform)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IUnknown&gt;<sp/>unknown{};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>CoCreateInstance(CLSID_CMSH264DecoderMFT,<sp/>NULL,<sp/>CLSCTX_INPROC_SERVER,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IID_PPV_ARGS(unknown.put())))</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unknown-&gt;QueryInterface(transform);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">HRESULT<sp/>make_transform_video(IMFTransform**<sp/>transform,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IID&amp;<sp/>iid)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IUnknown&gt;<sp/>unknown{};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>CoCreateInstance(iid,<sp/>NULL,<sp/>CLSCTX_INPROC_SERVER,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IID_PPV_ARGS(unknown.put())))</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unknown-&gt;QueryInterface(transform);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">HRESULT<sp/>make_transform_video(IMFTransform**<sp/>transform)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_transform_video(transform,<sp/>CLSID_VideoProcessorMFT);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">HRESULT<sp/>configure_D3D11_DXGI(gsl::not_null&lt;IMFTransform*&gt;<sp/>transform,<sp/>IMFDXGIDeviceManager*<sp/>device_manager)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFAttributes&gt;<sp/>attrs{};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>transform-&gt;GetAttributes(attrs.put()))<sp/></highlight><highlight class="comment">//<sp/>return<sp/>can<sp/>be<sp/>E_NOTIMPL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>supported{};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>attrs-&gt;GetUINT32(MF_SA_D3D11_AWARE,<sp/>&amp;supported);<sp/>FAILED(hr))</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(supported<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E_FAIL;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transform-&gt;ProcessMessage(MFT_MESSAGE_SET_D3D_MANAGER,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reinterpret_cast&lt;ULONG_PTR&gt;(static_cast&lt;IUnknown*&gt;(device_manager)));</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@see<sp/>https://docs.microsoft.com/en-us/windows/win32/medfound/h-264-video-decoder#transform-attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">HRESULT<sp/>configure_acceleration_H264(gsl::not_null&lt;IMFTransform*&gt;<sp/>transform)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFAttributes&gt;<sp/>attrs{};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>transform-&gt;GetAttributes(attrs.put()))</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>attrs-&gt;SetUINT32(CODECAPI_AVDecVideoAcceleration_H264,<sp/>TRUE);<sp/>FAILED(hr))</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::error(</highlight><highlight class="stringliteral">&quot;CODECAPI_AVDecVideoAcceleration_H264:<sp/>{:#08x}&quot;</highlight><highlight class="normal">,<sp/>hr);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>attrs-&gt;SetUINT32(CODECAPI_AVLowLatencyMode,<sp/>TRUE);<sp/>FAILED(hr))</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::error(</highlight><highlight class="stringliteral">&quot;CODECAPI_AVLowLatencyMode:<sp/>{:#08x}&quot;</highlight><highlight class="normal">,<sp/>hr);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>attrs-&gt;SetUINT32(CODECAPI_AVDecNumWorkerThreads,<sp/>1);<sp/>FAILED(hr))</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::error(</highlight><highlight class="stringliteral">&quot;CODECAPI_AVDecNumWorkerThreads:<sp/>{:#08x}&quot;</highlight><highlight class="normal">,<sp/>hr);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_OK;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">HRESULT<sp/>configure_video_output_RGB565(IMFMediaType*<sp/>type)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E_INVALIDARG;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>type-&gt;SetGUID(MF_MT_MAJOR_TYPE,<sp/>MFMediaType_Video))</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>type-&gt;SetUINT32(MF_MT_ALL_SAMPLES_INDEPENDENT,<sp/>TRUE))</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type-&gt;SetGUID(MF_MT_SUBTYPE,<sp/>MFVideoFormat_RGB565);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">HRESULT<sp/>make_video_output_RGB565(IMFMediaType**<sp/>ptr)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E_INVALIDARG;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaType&gt;<sp/>output_type{};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>MFCreateMediaType(output_type.put()))</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>configure_video_output_RGB565(output_type.get()))</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>output_type-&gt;AddRef();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>output_type.get();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_OK;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">HRESULT<sp/>configure_video_output_RGB32(IMFMediaType*<sp/>type)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E_INVALIDARG;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>type-&gt;SetGUID(MF_MT_MAJOR_TYPE,<sp/>MFMediaType_Video))</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>type-&gt;SetUINT32(MF_MT_ALL_SAMPLES_INDEPENDENT,<sp/>TRUE))</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>type-&gt;SetUINT32(MF_MT_INTERLACE_MODE,<sp/>MFVideoInterlace_Unknown))</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(auto<sp/>hr<sp/>=<sp/>MFSetAttributeRatio(output_type.get(),<sp/>MF_MT_PIXEL_ASPECT_RATIO,<sp/>16,<sp/>9))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>hr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type-&gt;SetGUID(MF_MT_SUBTYPE,<sp/>MFVideoFormat_RGB32);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">HRESULT<sp/>make_video_output_RGB32(IMFMediaType**<sp/>ptr)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E_INVALIDARG;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaType&gt;<sp/>output_type{};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>MFCreateMediaType(output_type.put()))</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>configure_video_output_RGB32(output_type.get()))</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>output_type-&gt;AddRef();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>output_type.get();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_OK;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">HRESULT<sp/>try_output_type(com_ptr&lt;IMFTransform&gt;<sp/>transform,<sp/>DWORD<sp/>ostream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GUID&amp;<sp/>desired,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMFMediaType**<sp/>output_type)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>type_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(com_ptr&lt;IMFMediaType&gt;<sp/>candidate<sp/>:<sp/>try_output_available_types(transform,<sp/>ostream,<sp/>type_index))<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GUID<sp/>subtype{};</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>candidate-&gt;GetGUID(MF_MT_SUBTYPE,<sp/>&amp;subtype))</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subtype<sp/>!=<sp/>desired)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>transform-&gt;SetOutputType(ostream,<sp/>candidate.get(),<sp/>0))</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_index<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E_FAIL;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transform-&gt;GetOutputCurrentType(ostream,<sp/>output_type);</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_input_available_types(com_ptr&lt;IMFTransform&gt;<sp/>transform,<sp/>DWORD<sp/>num_input,<sp/>HRESULT&amp;<sp/>ec)<sp/>noexcept(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>generator&lt;com_ptr&lt;IMFMediaType&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream_id<sp/>=<sp/>0u;<sp/>stream_id<sp/>&lt;<sp/>num_input;<sp/>++stream_id)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DWORD<sp/>type_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaType&gt;<sp/>media_type{};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>transform-&gt;GetInputAvailableType(stream_id,<sp/>type_index++,<sp/>media_type.put());<sp/>SUCCEEDED(ec);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ec<sp/>=<sp/>transform-&gt;GetInputAvailableType(stream_id,<sp/>type_index++,<sp/>media_type.put()))<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_yield<sp/>media_type;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>media_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>try_output_available_types(com_ptr&lt;IMFTransform&gt;<sp/>transform,<sp/>DWORD<sp/>stream_id,<sp/>DWORD&amp;<sp/>type_index)<sp/>noexcept(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>generator&lt;com_ptr&lt;IMFMediaType&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaType&gt;<sp/>media_type{};</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>transform-&gt;GetOutputAvailableType(stream_id,<sp/>type_index++,<sp/>media_type.put());<sp/>SUCCEEDED(hr);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hr<sp/>=<sp/>transform-&gt;GetOutputAvailableType(stream_id,<sp/>type_index++,<sp/>media_type.put()))<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_yield<sp/>media_type;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>media_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_output_available_types(com_ptr&lt;IMFTransform&gt;<sp/>transform,<sp/>DWORD<sp/>num_output,<sp/>HRESULT&amp;<sp/>ec)<sp/>noexcept(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>generator&lt;com_ptr&lt;IMFMediaType&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream_id<sp/>=<sp/>0u;<sp/>stream_id<sp/>&lt;<sp/>num_output;<sp/>++stream_id)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DWORD<sp/>type_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaType&gt;<sp/>media_type{};</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>transform-&gt;GetOutputAvailableType(stream_id,<sp/>type_index++,<sp/>media_type.put());<sp/>SUCCEEDED(ec);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ec<sp/>=<sp/>transform-&gt;GetOutputAvailableType(stream_id,<sp/>type_index++,<sp/>media_type.put()))<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_yield<sp/>media_type;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>media_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>try_input_available_types(com_ptr&lt;IMFTransform&gt;<sp/>transform,<sp/>DWORD<sp/>stream_id,<sp/>DWORD&amp;<sp/>type_index)<sp/>noexcept(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>generator&lt;com_ptr&lt;IMFMediaType&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaType&gt;<sp/>media_type{};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>transform-&gt;GetInputAvailableType(stream_id,<sp/>type_index++,<sp/>media_type.put());<sp/>SUCCEEDED(hr);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hr<sp/>=<sp/>transform-&gt;GetInputAvailableType(stream_id,<sp/>type_index++,<sp/>media_type.put()))<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_yield<sp/>media_type;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>media_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">HRESULT<sp/>configure_rectangle(gsl::not_null&lt;IMFVideoProcessorControl*&gt;<sp/>control,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gsl::not_null&lt;IMFMediaType*&gt;<sp/>media_type)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>w<sp/>=<sp/>0,<sp/>h<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>MFGetAttributeSize(media_type,<sp/>MF_MT_FRAME_SIZE,<sp/>&amp;w,<sp/>&amp;h);<sp/>FAILED(hr))</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>RECT<sp/>rect{};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>rect.right<sp/>=<sp/>w;<sp/></highlight><highlight class="comment">//<sp/>LTRB<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>rect.bottom<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>control-&gt;SetSourceRectangle(&amp;rect);<sp/>FAILED(hr))</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>control-&gt;SetDestinationRectangle(&amp;rect);</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">HRESULT<sp/>configure_source_rectangle(gsl::not_null&lt;IPropertyStore*&gt;<sp/>props,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RECT&amp;<sp/>rect)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>PROPVARIANT<sp/>val{};</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>val.intVal<sp/>=<sp/>rect.left;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>props-&gt;SetValue(MFPKEY_RESIZE_SRC_LEFT,<sp/>val))</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>val.intVal<sp/>=<sp/>rect.top;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>props-&gt;SetValue(MFPKEY_RESIZE_SRC_TOP,<sp/>val))</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>val.intVal<sp/>=<sp/>rect.right<sp/>-<sp/>rect.left;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>props-&gt;SetValue(MFPKEY_RESIZE_SRC_WIDTH,<sp/>val))</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>val.intVal<sp/>=<sp/>rect.bottom<sp/>-<sp/>rect.top;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>props-&gt;SetValue(MFPKEY_RESIZE_SRC_HEIGHT,<sp/>val);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">HRESULT<sp/>configure_destination_rectangle(gsl::not_null&lt;IPropertyStore*&gt;<sp/>props,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RECT&amp;<sp/>rect)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>PROPVARIANT<sp/>val{};</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>val.intVal<sp/>=<sp/>rect.left;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>props-&gt;SetValue(MFPKEY_RESIZE_DST_LEFT,<sp/>val))</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>val.intVal<sp/>=<sp/>rect.top;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>props-&gt;SetValue(MFPKEY_RESIZE_DST_TOP,<sp/>val))</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>val.intVal<sp/>=<sp/>rect.right<sp/>-<sp/>rect.left;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>props-&gt;SetValue(MFPKEY_RESIZE_DST_WIDTH,<sp/>val))</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>val.intVal<sp/>=<sp/>rect.bottom<sp/>-<sp/>rect.top;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>props-&gt;SetValue(MFPKEY_RESIZE_DST_HEIGHT,<sp/>val);</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">HRESULT<sp/>get_stream_descriptor(IMFPresentationDescriptor*<sp/>presentation,<sp/>IMFStreamDescriptor**<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>num_stream<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>presentation-&gt;GetStreamDescriptorCount(&amp;num_stream);<sp/>SUCCEEDED(hr)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0u;<sp/>i<sp/>&lt;<sp/>num_stream;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOL<sp/>selected<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>presentation-&gt;GetStreamDescriptorByIndex(i,<sp/>&amp;selected,<sp/>ptr);<sp/>FAILED(hr))</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selected)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_OK;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">HRESULT<sp/>configure_video(com_ptr&lt;IMFMediaType&gt;<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>GUID<sp/>subtype{};</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>type-&gt;GetGUID(MF_MT_SUBTYPE,<sp/>&amp;subtype);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>interlace<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>type-&gt;GetUINT32(MF_MT_INTERLACE_MODE,<sp/>&amp;interlace);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imode<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MFVideoInterlaceMode</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(interlace);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>stride<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>type-&gt;GetUINT32(MF_MT_DEFAULT_STRIDE,<sp/>&amp;stride);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>ycbcr2rgb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>type-&gt;GetUINT32(MF_MT_YUV_MATRIX,<sp/>&amp;ycbcr2rgb);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matrix<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MFVideoTransferMatrix</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ycbcr2rgb);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT64<sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>type-&gt;GetUINT64(MF_MT_FRAME_SIZE,<sp/>&amp;size);<sp/></highlight><highlight class="comment">//<sp/>MFGetAttributeSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>w<sp/>=<sp/>size<sp/>&gt;&gt;<sp/>32,<sp/>h<sp/>=<sp/>size<sp/>&amp;<sp/>UINT32_MAX;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT64<sp/>framerate<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>framerate<sp/>&gt;&gt;<sp/>32;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>type-&gt;GetUINT64(MF_MT_FRAME_RATE_RANGE_MAX,<sp/>&amp;framerate);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type-&gt;SetUINT64(MF_MT_FRAME_RATE,<sp/>framerate);</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">HRESULT<sp/>configure(com_ptr&lt;IMFStreamDescriptor&gt;<sp/>stream)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaTypeHandler&gt;<sp/>handler{};</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>stream-&gt;GetMediaTypeHandler(handler.put());<sp/>SUCCEEDED(hr)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>num_types<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>handler-&gt;GetMediaTypeCount(&amp;num_types);<sp/>SUCCEEDED(hr)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaType&gt;<sp/>type{};</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0u;<sp/>i<sp/>&lt;<sp/>num_types;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaType&gt;<sp/>current{};</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>handler-&gt;GetMediaTypeByIndex(i,<sp/>current.put());<sp/>FAILED(hr))</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(current.get());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler-&gt;SetCurrentMediaType(type.get());</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>read_samples(com_ptr&lt;IMFSourceReader&gt;<sp/>source_reader,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DWORD&amp;<sp/>index,<sp/>DWORD&amp;<sp/>flags,<sp/>LONGLONG&amp;<sp/>timestamp,<sp/>LONGLONG&amp;<sp/>duration)<sp/>noexcept(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>generator&lt;com_ptr&lt;IMFSample&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(MF_SOURCE_READER_FIRST_VIDEO_STREAM);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ptr&lt;IMFSample&gt;<sp/>input_sample{};</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>source_reader-&gt;ReadSample(stream,<sp/>0,<sp/>&amp;index,<sp/>&amp;flags,<sp/>&amp;timestamp,<sp/>input_sample.put()))</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>winrt::hresult_error{hr};</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>MF_SOURCE_READERF_ENDOFSTREAM)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>MF_SOURCE_READERF_STREAMTICK)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;MF_SOURCE_READERF_STREAMTICK&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_sample<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>probably<sp/>MF_SOURCE_READERF_STREAMTICK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_yield<sp/>input_sample;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal">};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>decode(com_ptr&lt;IMFTransform&gt;<sp/>transform,<sp/>DWORD<sp/>ostream,<sp/>com_ptr&lt;IMFMediaType&gt;<sp/>output_type,<sp/>HRESULT&amp;<sp/>ec)<sp/>noexcept</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>generator&lt;com_ptr&lt;IMFSample&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>MFT_OUTPUT_STREAM_INFO<sp/>output_stream_info{};</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>transform-&gt;GetOutputStreamInfo(ostream,<sp/>&amp;output_stream_info);<sp/>FAILED(ec))</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFT_OUTPUT_DATA_BUFFER<sp/>output_buffer{};</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ptr&lt;IMFSample&gt;<sp/>output_sample{};</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_stream_info.dwFlags<sp/>&amp;<sp/>MFT_OUTPUT_STREAM_PROVIDES_SAMPLES)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>create_single_buffer_sample(output_stream_info.cbSize,<sp/>output_sample.put());<sp/>FAILED(ec))</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_buffer.pSample<sp/>=<sp/>output_sample.get();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DWORD<sp/>status<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>MFT_OUTPUT_STATUS_SAMPLE_READY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ec<sp/>=<sp/>transform-&gt;ProcessOutput(0,<sp/>1,<sp/>&amp;output_buffer,<sp/>&amp;status);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>==<sp/>MF_E_TRANSFORM_NEED_MORE_INPUT)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>==<sp/>MF_E_TRANSFORM_STREAM_CHANGE)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_buffer.dwStatus<sp/>!=<sp/>MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>todo:<sp/>add<sp/>more<sp/>works<sp/>for<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>type<sp/>is<sp/>changed.<sp/>update<sp/>after<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>transform-&gt;GetOutputAvailableType(output_buffer.dwStreamID,<sp/>0,<sp/>output_type.put());<sp/>FAILED(ec))</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specify<sp/>the<sp/>format<sp/>we<sp/>want<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GUID<sp/>output_subtype{};</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>output_type-&gt;GetGUID(MF_MT_SUBTYPE,<sp/>&amp;output_subtype);<sp/>FAILED(ec))</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>transform-&gt;SetOutputType(ostream,<sp/>output_type.get(),<sp/>0);<sp/>FAILED(ec))</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>!=<sp/>S_OK)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_stream_info.dwFlags<sp/>&amp;<sp/>MFT_OUTPUT_STREAM_PROVIDES_SAMPLES)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_sample.attach(output_buffer.pSample);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_yield<sp/>output_sample;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>process(com_ptr&lt;IMFTransform&gt;<sp/>transform,<sp/>DWORD<sp/>istream,<sp/>DWORD<sp/>ostream,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ptr&lt;IMFSample&gt;<sp/>input_sample,<sp/>com_ptr&lt;IMFMediaType&gt;<sp/>output_type,<sp/>HRESULT&amp;<sp/>ec)<sp/>noexcept</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>generator&lt;com_ptr&lt;IMFSample&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>index{};</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>flags{};</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>LONGLONG<sp/>timestamp{};<sp/></highlight><highlight class="comment">//<sp/>unit<sp/>100-nanosecond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>LONGLONG<sp/>duration{};</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>input_sample-&gt;SetSampleTime(timestamp);<sp/>FAILED(ec))</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>transform-&gt;ProcessInput(istream,<sp/>input_sample.get(),<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>S_OK:<sp/></highlight><highlight class="comment">//<sp/>MF_E_TRANSFORM_TYPE_NOT_SET,<sp/>MF_E_NO_SAMPLE_DURATION,<sp/>MF_E_NO_SAMPLE_TIMESTAMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MF_E_UNSUPPORTED_D3D_TYPE:</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MF_E_NOTACCEPTING:</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fetch<sp/>output<sp/>if<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(com_ptr&lt;IMFSample&gt;<sp/>output_sample<sp/>:<sp/>decode(transform,<sp/>ostream,<sp/>output_type,<sp/>ec))</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_yield<sp/>output_sample;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>process(com_ptr&lt;IMFTransform&gt;<sp/>transform,<sp/>DWORD<sp/>istream,<sp/>DWORD<sp/>ostream,<sp/>com_ptr&lt;IMFSourceReader&gt;<sp/>source_reader,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HRESULT&amp;<sp/>ec)<sp/>-&gt;<sp/>generator&lt;com_ptr&lt;IMFSample&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaType&gt;<sp/>output_type{};</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>transform-&gt;GetOutputCurrentType(ostream,<sp/>output_type.put());<sp/>FAILED(ec))</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>transform-&gt;ProcessMessage(MFT_MESSAGE_NOTIFY_START_OF_STREAM,<sp/>NULL);<sp/>FAILED(ec))</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>transform-&gt;ProcessMessage(MFT_MESSAGE_NOTIFY_BEGIN_STREAMING,<sp/>NULL);<sp/>FAILED(ec))</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>index{};</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>flags{};</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>LONGLONG<sp/>timestamp{};<sp/></highlight><highlight class="comment">//<sp/>unit<sp/>100-nanosecond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>LONGLONG<sp/>duration{};</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(com_ptr&lt;IMFSample&gt;<sp/>input_sample<sp/>:<sp/>read_samples(source_reader,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,<sp/>flags,<sp/>timestamp,<sp/>duration))<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_sample-&gt;SetSampleTime(timestamp);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(com_ptr&lt;IMFSample&gt;<sp/>output_sample<sp/>:<sp/>process(transform,<sp/>istream,<sp/>ostream,<sp/>input_sample,<sp/>output_type,<sp/>ec))</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_yield<sp/>output_sample;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>transform-&gt;ProcessMessage(MFT_MESSAGE_NOTIFY_END_OF_STREAM,<sp/>NULL);<sp/>FAILED(ec))</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ec<sp/>=<sp/>transform-&gt;ProcessMessage(MFT_MESSAGE_COMMAND_DRAIN,<sp/>NULL);<sp/>FAILED(ec))</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(com_ptr&lt;IMFSample&gt;<sp/>output_sample<sp/>:<sp/>decode(transform,<sp/>ostream,<sp/>output_type,<sp/>ec))</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_yield<sp/>output_sample;</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal">HRESULT<sp/>create_single_buffer_sample(DWORD<sp/>bufsz,<sp/>IMFSample**<sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>MFCreateSample(sample))</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaBuffer&gt;<sp/>buffer{};</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>MFCreateMemoryBuffer(bufsz,<sp/>buffer.put()))</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*sample)-&gt;AddBuffer(buffer.get());</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal">HRESULT<sp/>create_and_copy_single_buffer_sample(IMFSample*<sp/>src,<sp/>IMFSample**<sp/>dst)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>total{};</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>src-&gt;GetTotalLength(&amp;total))</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>create_single_buffer_sample(total,<sp/>dst))</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>src-&gt;CopyAllItems(*dst))</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaBuffer&gt;<sp/>buffer{};</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>(*dst)-&gt;GetBufferByIndex(0,<sp/>buffer.put()))</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>src-&gt;CopyToBuffer(buffer.get());</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">HRESULT<sp/>get_transform_output(IMFTransform*<sp/>transform,<sp/>IMFSample**<sp/>sample,<sp/>BOOL&amp;<sp/>flushed)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>MFT_OUTPUT_STREAM_INFO<sp/>stream_info{};</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>transform-&gt;GetOutputStreamInfo(0,<sp/>&amp;stream_info))</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>flushed<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>*sample<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>MFT_OUTPUT_DATA_BUFFER<sp/>output{};</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((stream_info.dwFlags<sp/>&amp;<sp/>MFT_OUTPUT_STREAM_PROVIDES_SAMPLES)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>create_single_buffer_sample(stream_info.cbSize,<sp/>sample))</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.pSample<sp/>=<sp/>*sample;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>status<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>HRESULT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>transform-&gt;ProcessOutput(0,<sp/>1,<sp/>&amp;output,<sp/>&amp;status);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>S_OK)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sample<sp/>=<sp/>output.pSample;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_OK;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>https://docs.microsoft.com/en-us/windows/win32/medfound/handling-stream-changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>MF_E_TRANSFORM_STREAM_CHANGE)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com_ptr&lt;IMFMediaType&gt;<sp/>changed_output_type{};</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output.dwStatus<sp/>!=<sp/>MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>todo:<sp/>add<sp/>more<sp/>works<sp/>for<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E_NOTIMPL;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>transform-&gt;GetOutputAvailableType(0,<sp/>0,<sp/>changed_output_type.put()))</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>new<sp/>output<sp/>media<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>changed_output_type-&gt;SetGUID(MF_MT_SUBTYPE,<sp/>MFVideoFormat_IYUV))</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>transform-&gt;SetOutputType(0,<sp/>changed_output_type.get(),<sp/>0))</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hr<sp/>=<sp/>transform-&gt;ProcessMessage(MFT_MESSAGE_COMMAND_FLUSH,<sp/>NULL))</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hr;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flushed<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S_OK;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MF_E_TRANSFORM_NEED_MORE_INPUT:<sp/>not<sp/>an<sp/>error<sp/>condition<sp/>but<sp/>it<sp/>means<sp/>the<sp/>allocated<sp/>output<sp/>sample<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/media.cpp"/>
  </compounddef>
</doxygen>
