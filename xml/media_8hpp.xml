<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="media_8hpp" kind="file" language="C++">
    <compoundname>media.hpp</compoundname>
    <includes local="no">chrono</includes>
    <includes local="no">ctime</includes>
    <includes local="no">gsl/gsl</includes>
    <includes local="no">comdef.h</includes>
    <includes local="no">shlwapi.h</includes>
    <includes local="no">wrl/client.h</includes>
    <includes local="no">mfapi.h</includes>
    <includes local="no">mfidl.h</includes>
    <includes local="no">mfreadwrite.h</includes>
    <includedby refid="media_8cpp" local="yes">src/media.cpp</includedby>
    <incdepgraph>
      <node id="21">
        <label>mfidl.h</label>
      </node>
      <node id="18">
        <label>shlwapi.h</label>
      </node>
      <node id="17">
        <label>comdef.h</label>
      </node>
      <node id="16">
        <label>gsl/gsl</label>
      </node>
      <node id="20">
        <label>mfapi.h</label>
      </node>
      <node id="13">
        <label>src/media.hpp</label>
        <link refid="media_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ctime</label>
      </node>
      <node id="19">
        <label>wrl/client.h</label>
      </node>
      <node id="22">
        <label>mfreadwrite.h</label>
      </node>
      <node id="14">
        <label>chrono</label>
      </node>
    </incdepgraph>
    <innerclass refid="classdevice__group__t" prot="public">device_group_t</innerclass>
    <innerclass refid="structread__item__t" prot="public">read_item_t</innerclass>
    <innerclass refid="classprocess__timer__t" prot="public">process_timer_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="media_8hpp_1afff57e09d13a87eb34d8b8a0e0d01b75" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto startup</definition>
        <argsstring>() -&gt; gsl::final _action&lt; HRESULT(WINAPI *)()&gt;</argsstring>
        <name>startup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.hpp" line="16" column="1" bodyfile="src/media.cpp" bodystart="27" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="media_8hpp_1ae47c84bf57ff97e71578eecee2b9f8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT get_devices</definition>
        <argsstring>(IMFAttributes *attrs, std::vector&lt; ComPtr&lt; IMFActivate &gt;&gt; &amp;devices) noexcept</argsstring>
        <name>get_devices</name>
        <param>
          <type>IMFAttributes *</type>
          <declname>attrs</declname>
        </param>
        <param>
          <type>std::vector&lt; ComPtr&lt; IMFActivate &gt;&gt; &amp;</type>
          <declname>devices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.hpp" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="media_8hpp_1a0f188ed056176ce6098ccae92d943dde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT get_name</definition>
        <argsstring>(IMFActivate *device, std::wstring &amp;name) noexcept</argsstring>
        <name>get_name</name>
        <param>
          <type>IMFActivate *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>std::wstring &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.hpp" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="media_8hpp_1a6791b11ab050c4addac5b15ea7d36beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT get_stream_descriptor</definition>
        <argsstring>(IMFPresentationDescriptor *presentation, IMFStreamDescriptor **ptr)</argsstring>
        <name>get_stream_descriptor</name>
        <param>
          <type>IMFPresentationDescriptor *</type>
          <declname>presentation</declname>
        </param>
        <param>
          <type>IMFStreamDescriptor **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.hpp" line="21" column="1" bodyfile="src/media.cpp" bodystart="61" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="media_8hpp_1a4d439ee9ee5b9f516c805c8bb8507b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HRESULT</type>
        <definition>HRESULT configure</definition>
        <argsstring>(ComPtr&lt; IMFStreamDescriptor &gt; stream) noexcept</argsstring>
        <name>configure</name>
        <param>
          <type>ComPtr&lt; IMFStreamDescriptor &gt;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/video-processor-mft">https://docs.microsoft.com/en-us/windows/win32/medfound/video-processor-mft</ulink> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/video-media-types">https://docs.microsoft.com/en-us/windows/win32/medfound/video-media-types</ulink> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://docs.microsoft.com/en-us/windows/win32/medfound/about-yuv-video">https://docs.microsoft.com/en-us/windows/win32/medfound/about-yuv-video</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/media.hpp" line="26" column="1" bodyfile="src/media.cpp" bodystart="81" bodyend="122"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gsl/gsl&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;comdef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shlwapi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wrl/client.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;mferror.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mfapi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mfidl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mfreadwrite.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Microsoft::WRL::ComPtr;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>startup()<sp/>-&gt;<sp/>gsl::final_action&lt;HRESULT(WINAPI*)()&gt;;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">HRESULT<sp/>get_devices(IMFAttributes*<sp/>attrs,<sp/>std::vector&lt;ComPtr&lt;IMFActivate&gt;&gt;&amp;<sp/>devices)<sp/>noexcept;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">HRESULT<sp/>get_name(IMFActivate*<sp/>device,<sp/>std::wstring&amp;<sp/>name)<sp/>noexcept;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">HRESULT<sp/>get_stream_descriptor(IMFPresentationDescriptor*<sp/>presentation,<sp/>IMFStreamDescriptor**<sp/>ptr);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">HRESULT<sp/>configure(ComPtr&lt;IMFStreamDescriptor&gt;<sp/>stream)<sp/>noexcept;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="classdevice__group__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdevice__group__t" kindref="compound">device_group_t</ref><sp/>final<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>ComPtr&lt;IMFAttributes&gt;<sp/>attrs{};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ComPtr&lt;IMFActivate&gt;&gt;<sp/>devices{};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdevice__group__t_1a1bf927238df70ef48fdecfe392ceb3be" kindref="member">device_group_t</ref>()<sp/>noexcept(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structread__item__t" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structread__item__t" kindref="compound">read_item_t</ref><sp/>final<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>HRESULT<sp/>status;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>index;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>flags;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::nanoseconds<sp/>timestamp;<sp/></highlight><highlight class="comment">//<sp/>unit:<sp/>100<sp/>nanosecond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>ComPtr&lt;IMFSample&gt;<sp/>sample;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">};</highlight></codeline>
<codeline lineno="46"><highlight class="normal">static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structread__item__t" kindref="compound">read_item_t</ref>)<sp/>==<sp/>32);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classprocess__timer__t" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classprocess__timer__t" kindref="compound">process_timer_t</ref><sp/>final<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_t<sp/>start<sp/>=<sp/>clock();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="56" refid="classprocess__timer__t_1a63d79dc52088cd10d9a45135ef990157" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classprocess__timer__t_1a63d79dc52088cd10d9a45135ef990157" kindref="member">pick</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>now<sp/>=<sp/>clock();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(now<sp/>-<sp/>start)<sp/>/<sp/>CLOCKS_PER_SEC;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reset()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>this-&gt;pick();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>clock();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="src/media.hpp"/>
  </compounddef>
</doxygen>
