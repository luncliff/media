{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SSF: Simple Socket Functions \u00b6 Minimal C++ code snippet to build something. Note The document is deployed using the Travis CI 's GitHub Pages release Background \u00b6 This repository is a result of personal practice for Doxygen + Doxybook + MkDocs combination. The page theme is MkDocs Material . References \u00b6 There are some known examples for C++ project's documentation. Wish they can help you either... and special thanks to the doxybook and its author, Matus Novak Clear, Functional C++ Documentation with Sphinx + Breathe + Doxygen + CMake TartanLlama/cpp-documentation-example Doxybook Doxygen MkDocs License \u00b6 You can do what you want with the code. Visit the https://creativecommons.org/licenses/by/4.0/ for the license details.","title":"SSF: Simple Socket Functions"},{"location":"#ssf-simple-socket-functions","text":"Minimal C++ code snippet to build something. Note The document is deployed using the Travis CI 's GitHub Pages release","title":"SSF: Simple Socket Functions"},{"location":"#background","text":"This repository is a result of personal practice for Doxygen + Doxybook + MkDocs combination. The page theme is MkDocs Material .","title":"Background"},{"location":"#references","text":"There are some known examples for C++ project's documentation. Wish they can help you either... and special thanks to the doxybook and its author, Matus Novak Clear, Functional C++ Documentation with Sphinx + Breathe + Doxygen + CMake TartanLlama/cpp-documentation-example Doxybook Doxygen MkDocs","title":"References"},{"location":"#license","text":"You can do what you want with the code. Visit the https://creativecommons.org/licenses/by/4.0/ for the license details.","title":"License"},{"location":"annotated/","text":"Class List \u00b6 Here are the classes, structs, unions and interfaces with brief descriptions: struct addrinfo identify an Internet host and a service namespace std","title":"Class List"},{"location":"annotated/#class-list","text":"Here are the classes, structs, unions and interfaces with brief descriptions: struct addrinfo identify an Internet host and a service namespace std","title":"Class List"},{"location":"class_member_enums/","text":"Class Member Enums \u00b6","title":"Class Member Enums"},{"location":"class_member_enums/#class-member-enums","text":"","title":"Class Member Enums"},{"location":"class_member_functions/","text":"Class Member Functions \u00b6","title":"Class Member Functions"},{"location":"class_member_functions/#class-member-functions","text":"","title":"Class Member Functions"},{"location":"class_member_typedefs/","text":"Class Member Typedefs \u00b6","title":"Class Member Typedefs"},{"location":"class_member_typedefs/#class-member-typedefs","text":"","title":"Class Member Typedefs"},{"location":"class_member_variables/","text":"Class Member Variables \u00b6","title":"Class Member Variables"},{"location":"class_member_variables/#class-member-variables","text":"","title":"Class Member Variables"},{"location":"class_members/","text":"Class Members \u00b6","title":"Class Members"},{"location":"class_members/#class-members","text":"","title":"Class Members"},{"location":"classes/","text":"Class Index \u00b6 a \u00b6 addrinfo","title":"Classes"},{"location":"classes/#class-index","text":"","title":"Class Index"},{"location":"classes/#a","text":"addrinfo","title":"a"},{"location":"dir_68267d1309a1af8e8297ef4c3efbcdba/","text":"Dir src \u00b6 File List > src Files \u00b6 Type Name file socket.cpp file socket.hpp The documentation for this class was generated from the following file src/","title":"Dir src"},{"location":"dir_68267d1309a1af8e8297ef4c3efbcdba/#dir-src","text":"File List > src","title":"Dir src"},{"location":"dir_68267d1309a1af8e8297ef4c3efbcdba/#files","text":"Type Name file socket.cpp file socket.hpp The documentation for this class was generated from the following file src/","title":"Files"},{"location":"files/","text":"File List \u00b6 Here is a list of all files with brief descriptions: dir src file socket.cpp file socket.hpp","title":"File List"},{"location":"files/#file-list","text":"Here is a list of all files with brief descriptions: dir src file socket.cpp file socket.hpp","title":"File List"},{"location":"functions/","text":"Functions \u00b6 s \u00b6 socket_accept ( socket.cpp , socket.hpp ) socket_bind ( socket.cpp , socket.hpp ) socket_connect ( socket.cpp , socket.hpp ) socket_create ( socket.cpp , socket.hpp ) socket_get_name ( socket.cpp , socket.hpp ) socket_get_peer ( socket.cpp , socket.hpp ) socket_listen ( socket.cpp , socket.hpp ) socket_set_option ( socket.cpp , socket.hpp ) socket_set_option_nodelay ( socket.cpp , socket.hpp ) socket_set_option_recv_timout ( socket.cpp , socket.hpp ) socket_set_option_reuse_address ( socket.cpp , socket.hpp ) socket_set_option_send_timout ( socket.cpp , socket.hpp ) socket_set_option_timout ( socket.cpp ) socket_close ( socket.hpp ) socket_is_valid ( socket.hpp ) socket_recent ( socket.hpp ) socket_set_option_nonblock ( socket.hpp ) socket_setup ( socket.hpp ) socket_teardown ( socket.hpp ) socket_would_block ( socket.hpp )","title":"Functions"},{"location":"functions/#functions","text":"","title":"Functions"},{"location":"functions/#s","text":"socket_accept ( socket.cpp , socket.hpp ) socket_bind ( socket.cpp , socket.hpp ) socket_connect ( socket.cpp , socket.hpp ) socket_create ( socket.cpp , socket.hpp ) socket_get_name ( socket.cpp , socket.hpp ) socket_get_peer ( socket.cpp , socket.hpp ) socket_listen ( socket.cpp , socket.hpp ) socket_set_option ( socket.cpp , socket.hpp ) socket_set_option_nodelay ( socket.cpp , socket.hpp ) socket_set_option_recv_timout ( socket.cpp , socket.hpp ) socket_set_option_reuse_address ( socket.cpp , socket.hpp ) socket_set_option_send_timout ( socket.cpp , socket.hpp ) socket_set_option_timout ( socket.cpp ) socket_close ( socket.hpp ) socket_is_valid ( socket.hpp ) socket_recent ( socket.hpp ) socket_set_option_nonblock ( socket.hpp ) socket_setup ( socket.hpp ) socket_teardown ( socket.hpp ) socket_would_block ( socket.hpp )","title":"s"},{"location":"hierarchy/","text":"Class Hierarchy \u00b6 This inheritance list is sorted roughly, but not completely, alphabetically: struct addrinfo identify an Internet host and a service","title":"Class Hierarchy"},{"location":"hierarchy/#class-hierarchy","text":"This inheritance list is sorted roughly, but not completely, alphabetically: struct addrinfo identify an Internet host and a service","title":"Class Hierarchy"},{"location":"macros/","text":"Macros \u00b6","title":"Macros"},{"location":"macros/#macros","text":"","title":"Macros"},{"location":"modules/","text":"Modules \u00b6 Here is a list of all modules:","title":"Modules"},{"location":"modules/#modules","text":"Here is a list of all modules:","title":"Modules"},{"location":"namespace_member_enums/","text":"Namespace Member Enums \u00b6","title":"Namespace Member Enums"},{"location":"namespace_member_enums/#namespace-member-enums","text":"","title":"Namespace Member Enums"},{"location":"namespace_member_functions/","text":"Namespace Member Functions \u00b6","title":"Namespace Member Functions"},{"location":"namespace_member_functions/#namespace-member-functions","text":"","title":"Namespace Member Functions"},{"location":"namespace_member_typedefs/","text":"Namespace Member Typedefs \u00b6","title":"Namespace Member Typedefs"},{"location":"namespace_member_typedefs/#namespace-member-typedefs","text":"","title":"Namespace Member Typedefs"},{"location":"namespace_member_variables/","text":"Namespace Member Variables \u00b6","title":"Namespace Member Variables"},{"location":"namespace_member_variables/#namespace-member-variables","text":"","title":"Namespace Member Variables"},{"location":"namespace_members/","text":"Namespace Members \u00b6","title":"Namespace Members"},{"location":"namespace_members/#namespace-members","text":"","title":"Namespace Members"},{"location":"namespaces/","text":"Namespace List \u00b6 Here is a list of all namespaces with brief descriptions: namespace std","title":"Namespaces"},{"location":"namespaces/#namespace-list","text":"Here is a list of all namespaces with brief descriptions: namespace std","title":"Namespace List"},{"location":"namespacestd/","text":"Namespace std \u00b6 Class List > std The documentation for this class was generated from the following file src/socket.cpp","title":"Namespace std"},{"location":"namespacestd/#namespace-std","text":"Class List > std The documentation for this class was generated from the following file src/socket.cpp","title":"Namespace std"},{"location":"pages/","text":"Related Pages \u00b6 Here is a list of all related documentation pages:","title":"Related Pages"},{"location":"pages/#related-pages","text":"Here is a list of all related documentation pages:","title":"Related Pages"},{"location":"socket_8cpp/","text":"File socket.cpp \u00b6 File List > src > socket.cpp Go to the source code of this file. #include <cerrno> #include <chrono> #include <system_error> #include \"socket.hpp\" Namespaces \u00b6 Type Name namespace std Public Functions \u00b6 Type Name uint32_t socket_accept (int64_t ln, int64_t & sd) noexcept accept a connection request and return client socket uint32_t socket_bind (int64_t sd, const sockaddr_in & local) noexcept bind the socket to given address uint32_t socket_bind (int64_t sd, const sockaddr_in6 & local) noexcept bind the socket to given address uint32_t socket_connect (int64_t sd, const sockaddr_in & remote) noexcept try connect to given endpoint(IPv4) uint32_t socket_connect (int64_t sd, const sockaddr_in6 & remote) noexcept try connect to given endpoint(IPv6) int64_t socket_create (const addrinfo & hint) noexcept create a socket without error check uint32_t socket_create (const addrinfo & hint, int64_t & sd) noexcept create 1 socket uint32_t socket_get_name (int64_t sd, sockaddr_in & local) noexcept get the socket's address uint32_t socket_get_name (int64_t sd, sockaddr_in6 & local) noexcept get the socket's address uint32_t socket_get_peer (int64_t sd, sockaddr_in & remote) noexcept get connected peer's address uint32_t socket_get_peer (int64_t sd, sockaddr_in6 & remote) noexcept get connected peer's address uint32_t socket_listen (int64_t sd) noexcept start listening with the socket uint32_t socket_set_option (int64_t sd, int64_t level, int64_t option, int64_t value) noexcept change the socket's option uint32_t socket_set_option_nodelay (int64_t sd) noexcept make tcp send without delay uint32_t socket_set_option_recv_timout (int64_t sd, uint32_t us) noexcept set the socket's recv timeout uint32_t socket_set_option_reuse_address (int64_t sd) noexcept make socket to reuse address uint32_t socket_set_option_send_timout (int64_t sd, uint32_t us) noexcept set the socket's send timeout uint32_t socket_set_option_timout (int64_t sd, chrono::microseconds us, int64_t option) noexcept uint32_t socket_set_option_timout (int64_t sd, uint32_t us, int64_t option) noexcept Public Functions Documentation \u00b6 function socket_accept \u00b6 uint32_t socket_accept ( int64_t ln , int64_t & sd ) noexcept Parameters: ln listener socket sd reference to descriptor to save the new connected socket Returns: error code from errno or WSAGetLastError function socket_bind \u00b6 uint32_t socket_bind ( int64_t sd , const sockaddr_in & local ) noexcept Parameters: sd socket to bind local IPv4 address Returns: error code from errno or WSAGetLastError function socket_bind \u00b6 uint32_t socket_bind ( int64_t sd , const sockaddr_in6 & local ) noexcept Parameters: sd socket to bind local IPv6 address Returns: error code from errno or WSAGetLastError function socket_connect \u00b6 uint32_t socket_connect ( int64_t sd , const sockaddr_in & remote ) noexcept Parameters: sd socket to start connect remote IPv4 address Returns: error code from errno or WSAGetLastError function socket_connect \u00b6 uint32_t socket_connect ( int64_t sd , const sockaddr_in6 & remote ) noexcept Parameters: sd socket to start connect remote IPv6 address Returns: error code from errno or WSAGetLastError function socket_create \u00b6 int64_t socket_create ( const addrinfo & hint ) noexcept function socket_create \u00b6 uint32_t socket_create ( const addrinfo & hint , int64_t & sd ) noexcept Parameters: hint family, type, protocol sd reference to save the new socket Returns: error code from errno or WSAGetLastError function socket_get_name \u00b6 uint32_t socket_get_name ( int64_t sd , sockaddr_in & local ) noexcept Parameters: sd socket to query the bound address local object to receive IPv4 address Returns: error code from errno or WSAGetLastError function socket_get_name \u00b6 uint32_t socket_get_name ( int64_t sd , sockaddr_in6 & local ) noexcept Parameters: sd socket to query the bound address local object to receive IPv6 address Returns: error code from errno or WSAGetLastError function socket_get_peer \u00b6 uint32_t socket_get_peer ( int64_t sd , sockaddr_in & remote ) noexcept Parameters: sd socket to query the peer address remote object to receive IPv4 address Returns: error code from errno or WSAGetLastError function socket_get_peer \u00b6 uint32_t socket_get_peer ( int64_t sd , sockaddr_in6 & remote ) noexcept Parameters: sd socket to query the peer address remote object to receive IPv6 address Returns: error code from errno or WSAGetLastError function socket_listen \u00b6 uint32_t socket_listen ( int64_t sd ) noexcept The backlog value is fixed to 7. Parameters: sd socket to start listen Returns: error code from errno or WSAGetLastError function socket_set_option \u00b6 uint32_t socket_set_option ( int64_t sd , int64_t level , int64_t option , int64_t value ) noexcept Parameters: sd level option value Returns: error code from errno or WSAGetLastError function socket_set_option_nodelay \u00b6 uint32_t socket_set_option_nodelay ( int64_t sd ) noexcept Returns: error code from errno or WSAGetLastError function socket_set_option_recv_timout \u00b6 uint32_t socket_set_option_recv_timout ( int64_t sd , uint32_t us ) noexcept Parameters: sd socket to change timeout us microsecond fot the duration Returns: error code from errno or WSAGetLastError function socket_set_option_reuse_address \u00b6 uint32_t socket_set_option_reuse_address ( int64_t sd ) noexcept Returns: error code from errno or WSAGetLastError function socket_set_option_send_timout \u00b6 uint32_t socket_set_option_send_timout ( int64_t sd , uint32_t us ) noexcept Parameters: sd socket to change timeout us microsecond fot the duration Returns: error code from errno or WSAGetLastError function socket_set_option_timout \u00b6 uint32_t socket_set_option_timout ( int64_t sd , chrono :: microseconds us , int64_t option ) noexcept function socket_set_option_timout \u00b6 uint32_t socket_set_option_timout ( int64_t sd , uint32_t us , int64_t option ) noexcept The documentation for this class was generated from the following file src/socket.cpp","title":"File socket.cpp"},{"location":"socket_8cpp/#file-socketcpp","text":"File List > src > socket.cpp Go to the source code of this file. #include <cerrno> #include <chrono> #include <system_error> #include \"socket.hpp\"","title":"File socket.cpp"},{"location":"socket_8cpp/#namespaces","text":"Type Name namespace std","title":"Namespaces"},{"location":"socket_8cpp/#public-functions","text":"Type Name uint32_t socket_accept (int64_t ln, int64_t & sd) noexcept accept a connection request and return client socket uint32_t socket_bind (int64_t sd, const sockaddr_in & local) noexcept bind the socket to given address uint32_t socket_bind (int64_t sd, const sockaddr_in6 & local) noexcept bind the socket to given address uint32_t socket_connect (int64_t sd, const sockaddr_in & remote) noexcept try connect to given endpoint(IPv4) uint32_t socket_connect (int64_t sd, const sockaddr_in6 & remote) noexcept try connect to given endpoint(IPv6) int64_t socket_create (const addrinfo & hint) noexcept create a socket without error check uint32_t socket_create (const addrinfo & hint, int64_t & sd) noexcept create 1 socket uint32_t socket_get_name (int64_t sd, sockaddr_in & local) noexcept get the socket's address uint32_t socket_get_name (int64_t sd, sockaddr_in6 & local) noexcept get the socket's address uint32_t socket_get_peer (int64_t sd, sockaddr_in & remote) noexcept get connected peer's address uint32_t socket_get_peer (int64_t sd, sockaddr_in6 & remote) noexcept get connected peer's address uint32_t socket_listen (int64_t sd) noexcept start listening with the socket uint32_t socket_set_option (int64_t sd, int64_t level, int64_t option, int64_t value) noexcept change the socket's option uint32_t socket_set_option_nodelay (int64_t sd) noexcept make tcp send without delay uint32_t socket_set_option_recv_timout (int64_t sd, uint32_t us) noexcept set the socket's recv timeout uint32_t socket_set_option_reuse_address (int64_t sd) noexcept make socket to reuse address uint32_t socket_set_option_send_timout (int64_t sd, uint32_t us) noexcept set the socket's send timeout uint32_t socket_set_option_timout (int64_t sd, chrono::microseconds us, int64_t option) noexcept uint32_t socket_set_option_timout (int64_t sd, uint32_t us, int64_t option) noexcept","title":"Public Functions"},{"location":"socket_8cpp/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"socket_8cpp/#function-socket_accept","text":"uint32_t socket_accept ( int64_t ln , int64_t & sd ) noexcept Parameters: ln listener socket sd reference to descriptor to save the new connected socket Returns: error code from errno or WSAGetLastError","title":"function socket_accept"},{"location":"socket_8cpp/#function-socket_bind","text":"uint32_t socket_bind ( int64_t sd , const sockaddr_in & local ) noexcept Parameters: sd socket to bind local IPv4 address Returns: error code from errno or WSAGetLastError","title":"function socket_bind"},{"location":"socket_8cpp/#function-socket_bind_1","text":"uint32_t socket_bind ( int64_t sd , const sockaddr_in6 & local ) noexcept Parameters: sd socket to bind local IPv6 address Returns: error code from errno or WSAGetLastError","title":"function socket_bind"},{"location":"socket_8cpp/#function-socket_connect","text":"uint32_t socket_connect ( int64_t sd , const sockaddr_in & remote ) noexcept Parameters: sd socket to start connect remote IPv4 address Returns: error code from errno or WSAGetLastError","title":"function socket_connect"},{"location":"socket_8cpp/#function-socket_connect_1","text":"uint32_t socket_connect ( int64_t sd , const sockaddr_in6 & remote ) noexcept Parameters: sd socket to start connect remote IPv6 address Returns: error code from errno or WSAGetLastError","title":"function socket_connect"},{"location":"socket_8cpp/#function-socket_create","text":"int64_t socket_create ( const addrinfo & hint ) noexcept","title":"function socket_create"},{"location":"socket_8cpp/#function-socket_create_1","text":"uint32_t socket_create ( const addrinfo & hint , int64_t & sd ) noexcept Parameters: hint family, type, protocol sd reference to save the new socket Returns: error code from errno or WSAGetLastError","title":"function socket_create"},{"location":"socket_8cpp/#function-socket_get_name","text":"uint32_t socket_get_name ( int64_t sd , sockaddr_in & local ) noexcept Parameters: sd socket to query the bound address local object to receive IPv4 address Returns: error code from errno or WSAGetLastError","title":"function socket_get_name"},{"location":"socket_8cpp/#function-socket_get_name_1","text":"uint32_t socket_get_name ( int64_t sd , sockaddr_in6 & local ) noexcept Parameters: sd socket to query the bound address local object to receive IPv6 address Returns: error code from errno or WSAGetLastError","title":"function socket_get_name"},{"location":"socket_8cpp/#function-socket_get_peer","text":"uint32_t socket_get_peer ( int64_t sd , sockaddr_in & remote ) noexcept Parameters: sd socket to query the peer address remote object to receive IPv4 address Returns: error code from errno or WSAGetLastError","title":"function socket_get_peer"},{"location":"socket_8cpp/#function-socket_get_peer_1","text":"uint32_t socket_get_peer ( int64_t sd , sockaddr_in6 & remote ) noexcept Parameters: sd socket to query the peer address remote object to receive IPv6 address Returns: error code from errno or WSAGetLastError","title":"function socket_get_peer"},{"location":"socket_8cpp/#function-socket_listen","text":"uint32_t socket_listen ( int64_t sd ) noexcept The backlog value is fixed to 7. Parameters: sd socket to start listen Returns: error code from errno or WSAGetLastError","title":"function socket_listen"},{"location":"socket_8cpp/#function-socket_set_option","text":"uint32_t socket_set_option ( int64_t sd , int64_t level , int64_t option , int64_t value ) noexcept Parameters: sd level option value Returns: error code from errno or WSAGetLastError","title":"function socket_set_option"},{"location":"socket_8cpp/#function-socket_set_option_nodelay","text":"uint32_t socket_set_option_nodelay ( int64_t sd ) noexcept Returns: error code from errno or WSAGetLastError","title":"function socket_set_option_nodelay"},{"location":"socket_8cpp/#function-socket_set_option_recv_timout","text":"uint32_t socket_set_option_recv_timout ( int64_t sd , uint32_t us ) noexcept Parameters: sd socket to change timeout us microsecond fot the duration Returns: error code from errno or WSAGetLastError","title":"function socket_set_option_recv_timout"},{"location":"socket_8cpp/#function-socket_set_option_reuse_address","text":"uint32_t socket_set_option_reuse_address ( int64_t sd ) noexcept Returns: error code from errno or WSAGetLastError","title":"function socket_set_option_reuse_address"},{"location":"socket_8cpp/#function-socket_set_option_send_timout","text":"uint32_t socket_set_option_send_timout ( int64_t sd , uint32_t us ) noexcept Parameters: sd socket to change timeout us microsecond fot the duration Returns: error code from errno or WSAGetLastError","title":"function socket_set_option_send_timout"},{"location":"socket_8cpp/#function-socket_set_option_timout","text":"uint32_t socket_set_option_timout ( int64_t sd , chrono :: microseconds us , int64_t option ) noexcept","title":"function socket_set_option_timout"},{"location":"socket_8cpp/#function-socket_set_option_timout_1","text":"uint32_t socket_set_option_timout ( int64_t sd , uint32_t us , int64_t option ) noexcept The documentation for this class was generated from the following file src/socket.cpp","title":"function socket_set_option_timout"},{"location":"socket_8cpp_source/","text":"File socket.cpp \u00b6 File List > src > socket.cpp Go to the documentation of this file. #include <cerrno> #include <chrono> #include <system_error> #include \"socket.hpp\" #if __has_include(<WinSock2.h>) // use winsock #include <WS2tcpip.h> #include <WinSock2.h> #include <ws2def.h> #elif __has_include(<netinet/in.h>) // use netinet #include <netdb.h> #include <netinet/in.h> #include <netinet/tcp.h> #include <sys/socket.h> #include <fcntl.h> #include <unistd.h> #endif using namespace std ; int64_t socket_create ( const addrinfo & hint ) noexcept { return :: socket ( hint . ai_family , // hint . ai_socktype , hint . ai_protocol ); } uint32_t socket_create ( const addrinfo & hint , int64_t & sd ) noexcept { sd = socket_create ( hint ); return sd < 0 ? socket_recent () : 0 ; } uint32_t socket_bind ( int64_t sd , const sockaddr_in & local ) noexcept { if ( :: bind ( sd , ( const sockaddr * ) & local , sizeof ( sockaddr_in ))) return socket_recent (); return 0 ; } uint32_t socket_bind ( int64_t sd , const sockaddr_in6 & local ) noexcept { // bind socket and address if ( :: bind ( sd , ( const sockaddr * ) & local , sizeof ( sockaddr_in6 ))) return socket_recent (); return 0 ; } uint32_t socket_listen ( int64_t sd ) noexcept { :: listen ( sd , 7 ); return socket_recent (); } uint32_t socket_connect ( int64_t sd , const sockaddr_in & remote ) noexcept { auto * ptr = reinterpret_cast < const sockaddr *> ( & remote ); if ( :: connect ( sd , ptr , sizeof ( sockaddr_in )) < 0 ) return socket_recent (); return 0 ; } uint32_t socket_connect ( int64_t sd , const sockaddr_in6 & remote ) noexcept { auto * ptr = reinterpret_cast < const sockaddr *> ( & remote ); if ( :: connect ( sd , ptr , sizeof ( sockaddr_in6 )) < 0 ) return socket_recent (); return 0 ; } uint32_t socket_accept ( int64_t ln , int64_t & sd ) noexcept { sd = :: accept ( ln , nullptr , nullptr ); return socket_recent (); } uint32_t socket_get_name ( int64_t sd , sockaddr_in & local ) noexcept { socklen_t len = sizeof ( sockaddr_in ); if ( :: getsockname ( sd , ( sockaddr * ) & local , & len )) return socket_recent (); return 0 ; } uint32_t socket_get_name ( int64_t sd , sockaddr_in6 & local ) noexcept { socklen_t len = sizeof ( sockaddr_in6 ); if ( :: getsockname ( sd , ( sockaddr * ) & local , & len )) return socket_recent (); return 0 ; } uint32_t socket_get_peer ( int64_t sd , sockaddr_in & local ) noexcept { socklen_t len = sizeof ( sockaddr_in ); if ( :: getpeername ( sd , ( sockaddr * ) & local , & len )) return socket_recent (); return 0 ; } uint32_t socket_get_peer ( int64_t sd , sockaddr_in6 & local ) noexcept { socklen_t len = sizeof ( sockaddr_in6 ); if ( :: getpeername ( sd , ( sockaddr * ) & local , & len )) return socket_recent (); return 0 ; } uint32_t socket_set_option ( int64_t sd , int64_t level , // int64_t option , int64_t value ) noexcept { if ( auto ec = :: setsockopt ( sd , level , option , ( char * ) & value , sizeof ( value ))) return socket_recent (); return 0 ; } uint32_t socket_set_option_reuse_address ( int64_t sd ) noexcept { return socket_set_option ( sd , SOL_SOCKET , SO_REUSEADDR , true ); } uint32_t socket_set_option_nodelay ( int64_t sd ) noexcept { return socket_set_option ( sd , IPPROTO_TCP , TCP_NODELAY , true ); } uint32_t socket_set_option_timout ( int64_t sd , chrono :: microseconds us , int64_t option ) noexcept { const auto s = chrono :: duration_cast < chrono :: seconds > ( us ); us -= s ; timeval timeout {}; timeout . tv_sec = s . count (); timeout . tv_usec = us . count (); if ( :: setsockopt ( sd , SOL_SOCKET , option , // ( char * ) & timeout , sizeof ( timeval )) != 0 ) { return socket_recent (); } return 0 ; } uint32_t socket_set_option_timout ( int64_t sd , uint32_t us , int64_t option ) noexcept { return socket_set_option_timout ( sd , chrono :: microseconds { us }, option ); } uint32_t socket_set_option_send_timout ( int64_t sd , // uint32_t us ) noexcept { return socket_set_option_timout ( sd , chrono :: microseconds { us }, SO_SNDTIMEO ); } uint32_t socket_set_option_recv_timout ( int64_t sd , // uint32_t us ) noexcept { return socket_set_option_timout ( sd , chrono :: microseconds { us }, SO_RCVTIMEO ); } #if __has_include(<WinSock2.h>) // using winsock bool socket_is_valid ( int64_t h ) noexcept { return h != INVALID_SOCKET ; } WSADATA wsa_data {}; void socket_setup () noexcept ( false ) { if ( wsa_data . wVersion ) // already initialized return ; // init version 2.2 if ( :: WSAStartup ( MAKEWORD ( 2 , 2 ), & wsa_data )) { auto errc = WSAGetLastError (); throw system_error { errc , system_category (), \"WSAStartup\" }; } } void socket_teardown () noexcept { // not initialized or released if ( wsa_data . wVersion == 0 ) return ; :: WSACleanup (); wsa_data . wVersion = 0 ; } uint32_t socket_recent () noexcept { return static_cast < uint32_t > ( WSAGetLastError ()); } bool socket_would_block ( int ec ) noexcept { return ec == WSAEWOULDBLOCK || ec == EWOULDBLOCK || ec == EINPROGRESS || ec == ERROR_IO_PENDING ; } uint32_t socket_close ( int64_t sd ) noexcept { return :: shutdown ( sd , SD_BOTH ), :: closesocket ( sd ); } uint32_t socket_set_option_nonblock ( int64_t sd ) noexcept { u_long mode = TRUE ; return :: ioctlsocket ( sd , FIONBIO , & mode ); } #elif __has_include(<netinet/in.h>) // using netinet bool socket_is_valid ( int64_t h ) noexcept { return h > 0 ; } void socket_setup () noexcept ( false ) { // do nothing for posix system. network operation already available } void socket_teardown () noexcept { } uint32_t socket_recent () noexcept { return static_cast < uint32_t > ( errno ); } bool socket_would_block ( int ec ) noexcept { return ec == EINPROGRESS ; } uint32_t socket_close ( int64_t sd ) noexcept { return shutdown ( sd , SHUT_RDWR ), close ( sd ), errno ; } uint32_t socket_set_option_nonblock ( int64_t sd ) noexcept { // make non-block/async if ( fcntl ( sd , F_SETFL , O_NONBLOCK ) != 0 ) return errno ; return 0 ; } #endif","title":"File socket.cpp"},{"location":"socket_8cpp_source/#file-socketcpp","text":"File List > src > socket.cpp Go to the documentation of this file. #include <cerrno> #include <chrono> #include <system_error> #include \"socket.hpp\" #if __has_include(<WinSock2.h>) // use winsock #include <WS2tcpip.h> #include <WinSock2.h> #include <ws2def.h> #elif __has_include(<netinet/in.h>) // use netinet #include <netdb.h> #include <netinet/in.h> #include <netinet/tcp.h> #include <sys/socket.h> #include <fcntl.h> #include <unistd.h> #endif using namespace std ; int64_t socket_create ( const addrinfo & hint ) noexcept { return :: socket ( hint . ai_family , // hint . ai_socktype , hint . ai_protocol ); } uint32_t socket_create ( const addrinfo & hint , int64_t & sd ) noexcept { sd = socket_create ( hint ); return sd < 0 ? socket_recent () : 0 ; } uint32_t socket_bind ( int64_t sd , const sockaddr_in & local ) noexcept { if ( :: bind ( sd , ( const sockaddr * ) & local , sizeof ( sockaddr_in ))) return socket_recent (); return 0 ; } uint32_t socket_bind ( int64_t sd , const sockaddr_in6 & local ) noexcept { // bind socket and address if ( :: bind ( sd , ( const sockaddr * ) & local , sizeof ( sockaddr_in6 ))) return socket_recent (); return 0 ; } uint32_t socket_listen ( int64_t sd ) noexcept { :: listen ( sd , 7 ); return socket_recent (); } uint32_t socket_connect ( int64_t sd , const sockaddr_in & remote ) noexcept { auto * ptr = reinterpret_cast < const sockaddr *> ( & remote ); if ( :: connect ( sd , ptr , sizeof ( sockaddr_in )) < 0 ) return socket_recent (); return 0 ; } uint32_t socket_connect ( int64_t sd , const sockaddr_in6 & remote ) noexcept { auto * ptr = reinterpret_cast < const sockaddr *> ( & remote ); if ( :: connect ( sd , ptr , sizeof ( sockaddr_in6 )) < 0 ) return socket_recent (); return 0 ; } uint32_t socket_accept ( int64_t ln , int64_t & sd ) noexcept { sd = :: accept ( ln , nullptr , nullptr ); return socket_recent (); } uint32_t socket_get_name ( int64_t sd , sockaddr_in & local ) noexcept { socklen_t len = sizeof ( sockaddr_in ); if ( :: getsockname ( sd , ( sockaddr * ) & local , & len )) return socket_recent (); return 0 ; } uint32_t socket_get_name ( int64_t sd , sockaddr_in6 & local ) noexcept { socklen_t len = sizeof ( sockaddr_in6 ); if ( :: getsockname ( sd , ( sockaddr * ) & local , & len )) return socket_recent (); return 0 ; } uint32_t socket_get_peer ( int64_t sd , sockaddr_in & local ) noexcept { socklen_t len = sizeof ( sockaddr_in ); if ( :: getpeername ( sd , ( sockaddr * ) & local , & len )) return socket_recent (); return 0 ; } uint32_t socket_get_peer ( int64_t sd , sockaddr_in6 & local ) noexcept { socklen_t len = sizeof ( sockaddr_in6 ); if ( :: getpeername ( sd , ( sockaddr * ) & local , & len )) return socket_recent (); return 0 ; } uint32_t socket_set_option ( int64_t sd , int64_t level , // int64_t option , int64_t value ) noexcept { if ( auto ec = :: setsockopt ( sd , level , option , ( char * ) & value , sizeof ( value ))) return socket_recent (); return 0 ; } uint32_t socket_set_option_reuse_address ( int64_t sd ) noexcept { return socket_set_option ( sd , SOL_SOCKET , SO_REUSEADDR , true ); } uint32_t socket_set_option_nodelay ( int64_t sd ) noexcept { return socket_set_option ( sd , IPPROTO_TCP , TCP_NODELAY , true ); } uint32_t socket_set_option_timout ( int64_t sd , chrono :: microseconds us , int64_t option ) noexcept { const auto s = chrono :: duration_cast < chrono :: seconds > ( us ); us -= s ; timeval timeout {}; timeout . tv_sec = s . count (); timeout . tv_usec = us . count (); if ( :: setsockopt ( sd , SOL_SOCKET , option , // ( char * ) & timeout , sizeof ( timeval )) != 0 ) { return socket_recent (); } return 0 ; } uint32_t socket_set_option_timout ( int64_t sd , uint32_t us , int64_t option ) noexcept { return socket_set_option_timout ( sd , chrono :: microseconds { us }, option ); } uint32_t socket_set_option_send_timout ( int64_t sd , // uint32_t us ) noexcept { return socket_set_option_timout ( sd , chrono :: microseconds { us }, SO_SNDTIMEO ); } uint32_t socket_set_option_recv_timout ( int64_t sd , // uint32_t us ) noexcept { return socket_set_option_timout ( sd , chrono :: microseconds { us }, SO_RCVTIMEO ); } #if __has_include(<WinSock2.h>) // using winsock bool socket_is_valid ( int64_t h ) noexcept { return h != INVALID_SOCKET ; } WSADATA wsa_data {}; void socket_setup () noexcept ( false ) { if ( wsa_data . wVersion ) // already initialized return ; // init version 2.2 if ( :: WSAStartup ( MAKEWORD ( 2 , 2 ), & wsa_data )) { auto errc = WSAGetLastError (); throw system_error { errc , system_category (), \"WSAStartup\" }; } } void socket_teardown () noexcept { // not initialized or released if ( wsa_data . wVersion == 0 ) return ; :: WSACleanup (); wsa_data . wVersion = 0 ; } uint32_t socket_recent () noexcept { return static_cast < uint32_t > ( WSAGetLastError ()); } bool socket_would_block ( int ec ) noexcept { return ec == WSAEWOULDBLOCK || ec == EWOULDBLOCK || ec == EINPROGRESS || ec == ERROR_IO_PENDING ; } uint32_t socket_close ( int64_t sd ) noexcept { return :: shutdown ( sd , SD_BOTH ), :: closesocket ( sd ); } uint32_t socket_set_option_nonblock ( int64_t sd ) noexcept { u_long mode = TRUE ; return :: ioctlsocket ( sd , FIONBIO , & mode ); } #elif __has_include(<netinet/in.h>) // using netinet bool socket_is_valid ( int64_t h ) noexcept { return h > 0 ; } void socket_setup () noexcept ( false ) { // do nothing for posix system. network operation already available } void socket_teardown () noexcept { } uint32_t socket_recent () noexcept { return static_cast < uint32_t > ( errno ); } bool socket_would_block ( int ec ) noexcept { return ec == EINPROGRESS ; } uint32_t socket_close ( int64_t sd ) noexcept { return shutdown ( sd , SHUT_RDWR ), close ( sd ), errno ; } uint32_t socket_set_option_nonblock ( int64_t sd ) noexcept { // make non-block/async if ( fcntl ( sd , F_SETFL , O_NONBLOCK ) != 0 ) return errno ; return 0 ; } #endif","title":"File socket.cpp"},{"location":"socket_8hpp/","text":"File socket.hpp \u00b6 File List > src > socket.hpp Go to the source code of this file. #include <cstdint> #include <gsl/gsl> Public Functions \u00b6 Type Name uint32_t socket_accept (int64_t ln, int64_t & sd) noexcept accept a connection request and return client socket uint32_t socket_bind (int64_t sd, const sockaddr_in & local) noexcept bind the socket to given address uint32_t socket_bind (int64_t sd, const sockaddr_in6 & local) noexcept bind the socket to given address uint32_t socket_close (int64_t sd) noexcept dispose the given socket uint32_t socket_connect (int64_t sd, const sockaddr_in & remote) noexcept try connect to given endpoint(IPv4) uint32_t socket_connect (int64_t sd, const sockaddr_in6 & remote) noexcept try connect to given endpoint(IPv6) uint32_t socket_create (const addrinfo & hint, int64_t & sd) noexcept create 1 socket uint32_t socket_get_name (int64_t sd, sockaddr_in & local) noexcept get the socket's address uint32_t socket_get_name (int64_t sd, sockaddr_in6 & local) noexcept get the socket's address uint32_t socket_get_peer (int64_t sd, sockaddr_in & remote) noexcept get connected peer's address uint32_t socket_get_peer (int64_t sd, sockaddr_in6 & remote) noexcept get connected peer's address bool socket_is_valid (int64_t sd) noexcept check if given socket descriptor is valid uint32_t socket_listen (int64_t sd) noexcept start listening with the socket uint32_t socket_recent () noexcept network related error uint32_t socket_set_option (int64_t sd, int64_t level, int64_t option, int64_t value) noexcept change the socket's option uint32_t socket_set_option_nodelay (int64_t sd) noexcept make tcp send without delay uint32_t socket_set_option_nonblock (int64_t sd) noexcept make socket to operate in non-blocking mode uint32_t socket_set_option_recv_timout (int64_t sd, uint32_t us) noexcept set the socket's recv timeout uint32_t socket_set_option_reuse_address (int64_t sd) noexcept make socket to reuse address uint32_t socket_set_option_send_timout (int64_t sd, uint32_t us) noexcept set the socket's send timeout void socket_setup () noexcept initialize platform specific network module void socket_teardown () noexcept release platform specific network module bool socket_would_block (uint32_t ec) noexcept test if the error code is for non-blocking Public Functions Documentation \u00b6 function socket_accept \u00b6 uint32_t socket_accept ( int64_t ln , int64_t & sd ) noexcept Parameters: ln listener socket sd reference to descriptor to save the new connected socket Returns: error code from errno or WSAGetLastError function socket_bind \u00b6 uint32_t socket_bind ( int64_t sd , const sockaddr_in & local ) noexcept Parameters: sd socket to bind local IPv4 address Returns: error code from errno or WSAGetLastError function socket_bind \u00b6 uint32_t socket_bind ( int64_t sd , const sockaddr_in6 & local ) noexcept Parameters: sd socket to bind local IPv6 address Returns: error code from errno or WSAGetLastError function socket_close \u00b6 uint32_t socket_close ( int64_t sd ) noexcept Parameters: sd Returns: error code from errno or WSAGetLastError function socket_connect \u00b6 uint32_t socket_connect ( int64_t sd , const sockaddr_in & remote ) noexcept Parameters: sd socket to start connect remote IPv4 address Returns: error code from errno or WSAGetLastError function socket_connect \u00b6 uint32_t socket_connect ( int64_t sd , const sockaddr_in6 & remote ) noexcept Parameters: sd socket to start connect remote IPv6 address Returns: error code from errno or WSAGetLastError function socket_create \u00b6 uint32_t socket_create ( const addrinfo & hint , int64_t & sd ) noexcept Parameters: hint family, type, protocol sd reference to save the new socket Returns: error code from errno or WSAGetLastError function socket_get_name \u00b6 uint32_t socket_get_name ( int64_t sd , sockaddr_in & local ) noexcept Parameters: sd socket to query the bound address local object to receive IPv4 address Returns: error code from errno or WSAGetLastError function socket_get_name \u00b6 uint32_t socket_get_name ( int64_t sd , sockaddr_in6 & local ) noexcept Parameters: sd socket to query the bound address local object to receive IPv6 address Returns: error code from errno or WSAGetLastError function socket_get_peer \u00b6 uint32_t socket_get_peer ( int64_t sd , sockaddr_in & remote ) noexcept Parameters: sd socket to query the peer address remote object to receive IPv4 address Returns: error code from errno or WSAGetLastError function socket_get_peer \u00b6 uint32_t socket_get_peer ( int64_t sd , sockaddr_in6 & remote ) noexcept Parameters: sd socket to query the peer address remote object to receive IPv6 address Returns: error code from errno or WSAGetLastError function socket_is_valid \u00b6 bool socket_is_valid ( int64_t sd ) noexcept Parameters: sd Returns: true the sd is considered valid Returns: false negative or INVALID_SOCKET function socket_listen \u00b6 uint32_t socket_listen ( int64_t sd ) noexcept The backlog value is fixed to 7. Parameters: sd socket to start listen Returns: error code from errno or WSAGetLastError function socket_recent \u00b6 uint32_t socket_recent () noexcept Returns: error code from errno or WSAGetLastError function socket_set_option \u00b6 uint32_t socket_set_option ( int64_t sd , int64_t level , int64_t option , int64_t value ) noexcept Parameters: sd level option value Returns: error code from errno or WSAGetLastError function socket_set_option_nodelay \u00b6 uint32_t socket_set_option_nodelay ( int64_t sd ) noexcept Returns: error code from errno or WSAGetLastError function socket_set_option_nonblock \u00b6 uint32_t socket_set_option_nonblock ( int64_t sd ) noexcept Returns: error code from errno or WSAGetLastError function socket_set_option_recv_timout \u00b6 uint32_t socket_set_option_recv_timout ( int64_t sd , uint32_t us ) noexcept Parameters: sd socket to change timeout us microsecond fot the duration Returns: error code from errno or WSAGetLastError function socket_set_option_reuse_address \u00b6 uint32_t socket_set_option_reuse_address ( int64_t sd ) noexcept Returns: error code from errno or WSAGetLastError function socket_set_option_send_timout \u00b6 uint32_t socket_set_option_send_timout ( int64_t sd , uint32_t us ) noexcept Parameters: sd socket to change timeout us microsecond fot the duration Returns: error code from errno or WSAGetLastError function socket_setup \u00b6 void socket_setup () noexcept Exception: std::system_error function socket_teardown \u00b6 void socket_teardown () noexcept function socket_would_block \u00b6 bool socket_would_block ( uint32_t ec ) noexcept The documentation for this class was generated from the following file src/socket.hpp","title":"File socket.hpp"},{"location":"socket_8hpp/#file-sockethpp","text":"File List > src > socket.hpp Go to the source code of this file. #include <cstdint> #include <gsl/gsl>","title":"File socket.hpp"},{"location":"socket_8hpp/#public-functions","text":"Type Name uint32_t socket_accept (int64_t ln, int64_t & sd) noexcept accept a connection request and return client socket uint32_t socket_bind (int64_t sd, const sockaddr_in & local) noexcept bind the socket to given address uint32_t socket_bind (int64_t sd, const sockaddr_in6 & local) noexcept bind the socket to given address uint32_t socket_close (int64_t sd) noexcept dispose the given socket uint32_t socket_connect (int64_t sd, const sockaddr_in & remote) noexcept try connect to given endpoint(IPv4) uint32_t socket_connect (int64_t sd, const sockaddr_in6 & remote) noexcept try connect to given endpoint(IPv6) uint32_t socket_create (const addrinfo & hint, int64_t & sd) noexcept create 1 socket uint32_t socket_get_name (int64_t sd, sockaddr_in & local) noexcept get the socket's address uint32_t socket_get_name (int64_t sd, sockaddr_in6 & local) noexcept get the socket's address uint32_t socket_get_peer (int64_t sd, sockaddr_in & remote) noexcept get connected peer's address uint32_t socket_get_peer (int64_t sd, sockaddr_in6 & remote) noexcept get connected peer's address bool socket_is_valid (int64_t sd) noexcept check if given socket descriptor is valid uint32_t socket_listen (int64_t sd) noexcept start listening with the socket uint32_t socket_recent () noexcept network related error uint32_t socket_set_option (int64_t sd, int64_t level, int64_t option, int64_t value) noexcept change the socket's option uint32_t socket_set_option_nodelay (int64_t sd) noexcept make tcp send without delay uint32_t socket_set_option_nonblock (int64_t sd) noexcept make socket to operate in non-blocking mode uint32_t socket_set_option_recv_timout (int64_t sd, uint32_t us) noexcept set the socket's recv timeout uint32_t socket_set_option_reuse_address (int64_t sd) noexcept make socket to reuse address uint32_t socket_set_option_send_timout (int64_t sd, uint32_t us) noexcept set the socket's send timeout void socket_setup () noexcept initialize platform specific network module void socket_teardown () noexcept release platform specific network module bool socket_would_block (uint32_t ec) noexcept test if the error code is for non-blocking","title":"Public Functions"},{"location":"socket_8hpp/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"socket_8hpp/#function-socket_accept","text":"uint32_t socket_accept ( int64_t ln , int64_t & sd ) noexcept Parameters: ln listener socket sd reference to descriptor to save the new connected socket Returns: error code from errno or WSAGetLastError","title":"function socket_accept"},{"location":"socket_8hpp/#function-socket_bind","text":"uint32_t socket_bind ( int64_t sd , const sockaddr_in & local ) noexcept Parameters: sd socket to bind local IPv4 address Returns: error code from errno or WSAGetLastError","title":"function socket_bind"},{"location":"socket_8hpp/#function-socket_bind_1","text":"uint32_t socket_bind ( int64_t sd , const sockaddr_in6 & local ) noexcept Parameters: sd socket to bind local IPv6 address Returns: error code from errno or WSAGetLastError","title":"function socket_bind"},{"location":"socket_8hpp/#function-socket_close","text":"uint32_t socket_close ( int64_t sd ) noexcept Parameters: sd Returns: error code from errno or WSAGetLastError","title":"function socket_close"},{"location":"socket_8hpp/#function-socket_connect","text":"uint32_t socket_connect ( int64_t sd , const sockaddr_in & remote ) noexcept Parameters: sd socket to start connect remote IPv4 address Returns: error code from errno or WSAGetLastError","title":"function socket_connect"},{"location":"socket_8hpp/#function-socket_connect_1","text":"uint32_t socket_connect ( int64_t sd , const sockaddr_in6 & remote ) noexcept Parameters: sd socket to start connect remote IPv6 address Returns: error code from errno or WSAGetLastError","title":"function socket_connect"},{"location":"socket_8hpp/#function-socket_create","text":"uint32_t socket_create ( const addrinfo & hint , int64_t & sd ) noexcept Parameters: hint family, type, protocol sd reference to save the new socket Returns: error code from errno or WSAGetLastError","title":"function socket_create"},{"location":"socket_8hpp/#function-socket_get_name","text":"uint32_t socket_get_name ( int64_t sd , sockaddr_in & local ) noexcept Parameters: sd socket to query the bound address local object to receive IPv4 address Returns: error code from errno or WSAGetLastError","title":"function socket_get_name"},{"location":"socket_8hpp/#function-socket_get_name_1","text":"uint32_t socket_get_name ( int64_t sd , sockaddr_in6 & local ) noexcept Parameters: sd socket to query the bound address local object to receive IPv6 address Returns: error code from errno or WSAGetLastError","title":"function socket_get_name"},{"location":"socket_8hpp/#function-socket_get_peer","text":"uint32_t socket_get_peer ( int64_t sd , sockaddr_in & remote ) noexcept Parameters: sd socket to query the peer address remote object to receive IPv4 address Returns: error code from errno or WSAGetLastError","title":"function socket_get_peer"},{"location":"socket_8hpp/#function-socket_get_peer_1","text":"uint32_t socket_get_peer ( int64_t sd , sockaddr_in6 & remote ) noexcept Parameters: sd socket to query the peer address remote object to receive IPv6 address Returns: error code from errno or WSAGetLastError","title":"function socket_get_peer"},{"location":"socket_8hpp/#function-socket_is_valid","text":"bool socket_is_valid ( int64_t sd ) noexcept Parameters: sd Returns: true the sd is considered valid Returns: false negative or INVALID_SOCKET","title":"function socket_is_valid"},{"location":"socket_8hpp/#function-socket_listen","text":"uint32_t socket_listen ( int64_t sd ) noexcept The backlog value is fixed to 7. Parameters: sd socket to start listen Returns: error code from errno or WSAGetLastError","title":"function socket_listen"},{"location":"socket_8hpp/#function-socket_recent","text":"uint32_t socket_recent () noexcept Returns: error code from errno or WSAGetLastError","title":"function socket_recent"},{"location":"socket_8hpp/#function-socket_set_option","text":"uint32_t socket_set_option ( int64_t sd , int64_t level , int64_t option , int64_t value ) noexcept Parameters: sd level option value Returns: error code from errno or WSAGetLastError","title":"function socket_set_option"},{"location":"socket_8hpp/#function-socket_set_option_nodelay","text":"uint32_t socket_set_option_nodelay ( int64_t sd ) noexcept Returns: error code from errno or WSAGetLastError","title":"function socket_set_option_nodelay"},{"location":"socket_8hpp/#function-socket_set_option_nonblock","text":"uint32_t socket_set_option_nonblock ( int64_t sd ) noexcept Returns: error code from errno or WSAGetLastError","title":"function socket_set_option_nonblock"},{"location":"socket_8hpp/#function-socket_set_option_recv_timout","text":"uint32_t socket_set_option_recv_timout ( int64_t sd , uint32_t us ) noexcept Parameters: sd socket to change timeout us microsecond fot the duration Returns: error code from errno or WSAGetLastError","title":"function socket_set_option_recv_timout"},{"location":"socket_8hpp/#function-socket_set_option_reuse_address","text":"uint32_t socket_set_option_reuse_address ( int64_t sd ) noexcept Returns: error code from errno or WSAGetLastError","title":"function socket_set_option_reuse_address"},{"location":"socket_8hpp/#function-socket_set_option_send_timout","text":"uint32_t socket_set_option_send_timout ( int64_t sd , uint32_t us ) noexcept Parameters: sd socket to change timeout us microsecond fot the duration Returns: error code from errno or WSAGetLastError","title":"function socket_set_option_send_timout"},{"location":"socket_8hpp/#function-socket_setup","text":"void socket_setup () noexcept Exception: std::system_error","title":"function socket_setup"},{"location":"socket_8hpp/#function-socket_teardown","text":"void socket_teardown () noexcept","title":"function socket_teardown"},{"location":"socket_8hpp/#function-socket_would_block","text":"bool socket_would_block ( uint32_t ec ) noexcept The documentation for this class was generated from the following file src/socket.hpp","title":"function socket_would_block"},{"location":"socket_8hpp_source/","text":"File socket.hpp \u00b6 File List > src > socket.hpp Go to the documentation of this file. #pragma once #include <cstdint> #include <gsl/gsl> struct addrinfo ; struct sockaddr_in ; struct sockaddr_in6 ; void socket_setup () noexcept ( false ); void socket_teardown () noexcept ; uint32_t socket_recent () noexcept ; bool socket_is_valid ( int64_t sd ) noexcept ; uint32_t socket_create ( const addrinfo & hint , int64_t & sd ) noexcept ; uint32_t socket_close ( int64_t sd ) noexcept ; uint32_t socket_bind ( int64_t sd , const sockaddr_in & local ) noexcept ; uint32_t socket_bind ( int64_t sd , const sockaddr_in6 & local ) noexcept ; uint32_t socket_listen ( int64_t sd ) noexcept ; uint32_t socket_connect ( int64_t sd , const sockaddr_in & remote ) noexcept ; uint32_t socket_connect ( int64_t sd , const sockaddr_in6 & remote ) noexcept ; uint32_t socket_accept ( int64_t ln , int64_t & sd ) noexcept ; uint32_t socket_get_name ( int64_t sd , sockaddr_in & local ) noexcept ; uint32_t socket_get_name ( int64_t sd , sockaddr_in6 & local ) noexcept ; uint32_t socket_get_peer ( int64_t sd , sockaddr_in & remote ) noexcept ; uint32_t socket_get_peer ( int64_t sd , sockaddr_in6 & remote ) noexcept ; uint32_t socket_set_option ( int64_t sd , int64_t level , // int64_t option , int64_t value ) noexcept ; uint32_t socket_set_option_nonblock ( int64_t sd ) noexcept ; uint32_t socket_set_option_reuse_address ( int64_t sd ) noexcept ; uint32_t socket_set_option_nodelay ( int64_t sd ) noexcept ; uint32_t socket_set_option_send_timout ( int64_t sd , // uint32_t us ) noexcept ; uint32_t socket_set_option_recv_timout ( int64_t sd , // uint32_t us ) noexcept ; bool socket_would_block ( uint32_t ec ) noexcept ;","title":"File socket.hpp"},{"location":"socket_8hpp_source/#file-sockethpp","text":"File List > src > socket.hpp Go to the documentation of this file. #pragma once #include <cstdint> #include <gsl/gsl> struct addrinfo ; struct sockaddr_in ; struct sockaddr_in6 ; void socket_setup () noexcept ( false ); void socket_teardown () noexcept ; uint32_t socket_recent () noexcept ; bool socket_is_valid ( int64_t sd ) noexcept ; uint32_t socket_create ( const addrinfo & hint , int64_t & sd ) noexcept ; uint32_t socket_close ( int64_t sd ) noexcept ; uint32_t socket_bind ( int64_t sd , const sockaddr_in & local ) noexcept ; uint32_t socket_bind ( int64_t sd , const sockaddr_in6 & local ) noexcept ; uint32_t socket_listen ( int64_t sd ) noexcept ; uint32_t socket_connect ( int64_t sd , const sockaddr_in & remote ) noexcept ; uint32_t socket_connect ( int64_t sd , const sockaddr_in6 & remote ) noexcept ; uint32_t socket_accept ( int64_t ln , int64_t & sd ) noexcept ; uint32_t socket_get_name ( int64_t sd , sockaddr_in & local ) noexcept ; uint32_t socket_get_name ( int64_t sd , sockaddr_in6 & local ) noexcept ; uint32_t socket_get_peer ( int64_t sd , sockaddr_in & remote ) noexcept ; uint32_t socket_get_peer ( int64_t sd , sockaddr_in6 & remote ) noexcept ; uint32_t socket_set_option ( int64_t sd , int64_t level , // int64_t option , int64_t value ) noexcept ; uint32_t socket_set_option_nonblock ( int64_t sd ) noexcept ; uint32_t socket_set_option_reuse_address ( int64_t sd ) noexcept ; uint32_t socket_set_option_nodelay ( int64_t sd ) noexcept ; uint32_t socket_set_option_send_timout ( int64_t sd , // uint32_t us ) noexcept ; uint32_t socket_set_option_recv_timout ( int64_t sd , // uint32_t us ) noexcept ; bool socket_would_block ( uint32_t ec ) noexcept ;","title":"File socket.hpp"},{"location":"structaddrinfo/","text":"Struct addrinfo \u00b6 Class List > addrinfo identify an Internet host and a service More... #include <socket.hpp> Detailed Description \u00b6 The documentation for this class was generated from the following file src/socket.hpp","title":"Struct addrinfo"},{"location":"structaddrinfo/#struct-addrinfo","text":"Class List > addrinfo identify an Internet host and a service More... #include <socket.hpp>","title":"Struct addrinfo"},{"location":"structaddrinfo/#detailed-description","text":"The documentation for this class was generated from the following file src/socket.hpp","title":"Detailed Description"},{"location":"variables/","text":"Variables \u00b6","title":"Variables"},{"location":"variables/#variables","text":"","title":"Variables"}]}